{\rtf1\adeflang1025\ansi\ansicpg936\uc2\adeff0\deff0\stshfdbch13\stshfloch0\stshfhich0\stshfbi0\deflang1033\deflangfe2052\themelang1033\themelangfe2052\themelangcs0{\fonttbl{\f0\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f13\fbidi \fnil\fcharset134\fprq2{\*\panose 02010600030101010101}\'cb\'ce\'cc\'e5{\*\falt SimSun};}{\f34\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria Math;}
{\f38\fbidi \fnil\fcharset134\fprq2{\*\panose 02010600030101010101}@\'cb\'ce\'cc\'e5;}{\f40\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Tahoma;}
{\flomajor\f31500\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fdbmajor\f31501\fbidi \fnil\fcharset134\fprq2{\*\panose 02010600030101010101}\'cb\'ce\'cc\'e5{\*\falt SimSun};}
{\fhimajor\f31502\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria;}{\fbimajor\f31503\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\flominor\f31504\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fdbminor\f31505\fbidi \fnil\fcharset134\fprq2{\*\panose 02010600030101010101}\'cb\'ce\'cc\'e5{\*\falt SimSun};}
{\fhiminor\f31506\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}{\fbiminor\f31507\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f44\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\f45\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\f47\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\f48\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\f49\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\f50\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f51\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\f52\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\f176\fbidi \fnil\fcharset0\fprq2 SimSun Western{\*\falt SimSun};}{\f384\fbidi \froman\fcharset238\fprq2 Cambria Math CE;}{\f385\fbidi \froman\fcharset204\fprq2 Cambria Math Cyr;}{\f387\fbidi \froman\fcharset161\fprq2 Cambria Math Greek;}
{\f388\fbidi \froman\fcharset162\fprq2 Cambria Math Tur;}{\f391\fbidi \froman\fcharset186\fprq2 Cambria Math Baltic;}{\f392\fbidi \froman\fcharset163\fprq2 Cambria Math (Vietnamese);}{\f426\fbidi \fnil\fcharset0\fprq2 @\'cb\'ce\'cc\'e5 Western;}
{\f444\fbidi \fswiss\fcharset238\fprq2 Tahoma CE;}{\f445\fbidi \fswiss\fcharset204\fprq2 Tahoma Cyr;}{\f447\fbidi \fswiss\fcharset161\fprq2 Tahoma Greek;}{\f448\fbidi \fswiss\fcharset162\fprq2 Tahoma Tur;}
{\f449\fbidi \fswiss\fcharset177\fprq2 Tahoma (Hebrew);}{\f450\fbidi \fswiss\fcharset178\fprq2 Tahoma (Arabic);}{\f451\fbidi \fswiss\fcharset186\fprq2 Tahoma Baltic;}{\f452\fbidi \fswiss\fcharset163\fprq2 Tahoma (Vietnamese);}
{\f453\fbidi \fswiss\fcharset222\fprq2 Tahoma (Thai);}{\flomajor\f31508\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flomajor\f31509\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\flomajor\f31511\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flomajor\f31512\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flomajor\f31513\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\flomajor\f31514\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flomajor\f31515\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flomajor\f31516\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fdbmajor\f31520\fbidi \fnil\fcharset0\fprq2 SimSun Western{\*\falt SimSun};}{\fhimajor\f31528\fbidi \froman\fcharset238\fprq2 Cambria CE;}{\fhimajor\f31529\fbidi \froman\fcharset204\fprq2 Cambria Cyr;}
{\fhimajor\f31531\fbidi \froman\fcharset161\fprq2 Cambria Greek;}{\fhimajor\f31532\fbidi \froman\fcharset162\fprq2 Cambria Tur;}{\fhimajor\f31535\fbidi \froman\fcharset186\fprq2 Cambria Baltic;}
{\fhimajor\f31536\fbidi \froman\fcharset163\fprq2 Cambria (Vietnamese);}{\fbimajor\f31538\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fbimajor\f31539\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fbimajor\f31541\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbimajor\f31542\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fbimajor\f31543\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fbimajor\f31544\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbimajor\f31545\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fbimajor\f31546\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\flominor\f31548\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flominor\f31549\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flominor\f31551\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\flominor\f31552\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flominor\f31553\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flominor\f31554\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\flominor\f31555\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flominor\f31556\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbminor\f31560\fbidi \fnil\fcharset0\fprq2 SimSun Western{\*\falt SimSun};}
{\fhiminor\f31568\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}{\fhiminor\f31569\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}{\fhiminor\f31571\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\fhiminor\f31572\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}
{\fhiminor\f31575\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}{\fhiminor\f31576\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}{\fbiminor\f31578\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fbiminor\f31579\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbiminor\f31581\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbiminor\f31582\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fbiminor\f31583\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbiminor\f31584\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbiminor\f31585\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fbiminor\f31586\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;
\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\*\defchp \fs21\kerning2\dbch\af13 }
{\*\defpap \ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 }\noqfpromote {\stylesheet{\qj \li0\ri0\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs21\alang1025 
\ltrch\fcs0 \fs21\lang1033\langfe2052\kerning2\loch\f0\hich\af0\dbch\af13\cgrid\langnp1033\langfenp2052 \snext0 \sqformat \spriority0 Normal;}{\s3\qj \li0\ri0\sb260\sa260\sl416\slmult1
\keep\keepn\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs32\alang1025 \ltrch\fcs0 \b\fs32\lang1033\langfe2052\kerning2\loch\f0\hich\af0\dbch\af13\cgrid\langnp1033\langfenp2052 
\sbasedon0 \snext0 \slink15 \sqformat \styrsid4014424 heading 3;}{\*\cs10 \additive \ssemihidden Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tblind0\tblindtype3\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs21\alang1025 \ltrch\fcs0 \fs21\lang1033\langfe2052\kerning2\loch\f0\hich\af0\dbch\af13\cgrid\langnp1033\langfenp2052 
\snext11 \ssemihidden \sunhideused \sqformat Normal Table;}{\*\cs15 \additive \rtlch\fcs1 \ab\af0\afs32 \ltrch\fcs0 \b\fs32 \sbasedon10 \slink3 \slocked \ssemihidden \spriority9 \'b1\'ea\'cc\'e2 3 Char;}{\s16\qc \li0\ri0\nowidctlpar\brdrb
\brdrs\brdrw15\brsp20 \tqc\tx4153\tqr\tx8306\wrapdefault\aspalpha\aspnum\faauto\nosnaplinegrid\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs18\alang1025 \ltrch\fcs0 
\fs18\lang1033\langfe2052\kerning2\loch\f0\hich\af0\dbch\af13\cgrid\langnp1033\langfenp2052 \sbasedon0 \snext16 \slink17 \ssemihidden \sunhideused \styrsid1715114 header;}{\*\cs17 \additive \rtlch\fcs1 \af0\afs18 \ltrch\fcs0 \fs18 
\sbasedon10 \slink16 \slocked \ssemihidden \styrsid1715114 \'d2\'b3\'c3\'bc Char;}{\s18\ql \li0\ri0\nowidctlpar\tqc\tx4153\tqr\tx8306\wrapdefault\aspalpha\aspnum\faauto\nosnaplinegrid\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs18\alang1025 
\ltrch\fcs0 \fs18\lang1033\langfe2052\kerning2\loch\f0\hich\af0\dbch\af13\cgrid\langnp1033\langfenp2052 \sbasedon0 \snext18 \slink19 \ssemihidden \sunhideused \styrsid1715114 footer;}{\*\cs19 \additive \rtlch\fcs1 \af0\afs18 \ltrch\fcs0 \fs18 
\sbasedon10 \slink18 \slocked \ssemihidden \styrsid1715114 \'d2\'b3\'bd\'c5 Char;}}{\*\revtbl {Unknown;}}{\*\rsidtbl \rsid28159\rsid526770\rsid550852\rsid595277\rsid597195\rsid621713\rsid1077055\rsid1513590\rsid1582767\rsid1715114\rsid2316846\rsid2316851\rsid2320380
\rsid2371059\rsid2442294\rsid2634001\rsid2698988\rsid2781639\rsid2782935\rsid2818314\rsid2892894\rsid2953163\rsid3016324\rsid3037029\rsid3083245\rsid3089838\rsid3426749\rsid3486620\rsid3498222\rsid3625243\rsid3691889\rsid3803179\rsid3821662\rsid3888217
\rsid4014424\rsid4206013\rsid4208783\rsid4607315\rsid4619351\rsid4784638\rsid4869087\rsid5116891\rsid5143419\rsid5204232\rsid5593342\rsid5707619\rsid5923363\rsid5995801\rsid6097716\rsid6367733\rsid6369073\rsid6438709\rsid6504614\rsid6633190\rsid6635895
\rsid6691270\rsid6752892\rsid6829312\rsid7087927\rsid7224022\rsid7288375\rsid7435902\rsid7614386\rsid7805874\rsid7824919\rsid7876217\rsid7895228\rsid7998044\rsid8270040\rsid8469890\rsid8473275\rsid8550564\rsid8652731\rsid8670986\rsid8805636\rsid8810129
\rsid8812290\rsid9002242\rsid9133853\rsid9138033\rsid9242304\rsid9263017\rsid9324823\rsid9511701\rsid9526235\rsid9926951\rsid10051942\rsid10237139\rsid10451137\rsid10499469\rsid10711045\rsid10844424\rsid10880270\rsid10895352\rsid10895417\rsid10952947
\rsid10972515\rsid11426989\rsid11537107\rsid11544874\rsid11668790\rsid11736510\rsid11746556\rsid11749075\rsid12005502\rsid12280131\rsid12329302\rsid12418685\rsid12545743\rsid12615043\rsid12726074\rsid12781683\rsid12800879\rsid12807260\rsid13333884
\rsid13398668\rsid13519805\rsid13596886\rsid13652344\rsid14033169\rsid14040510\rsid14105049\rsid14161495\rsid14222681\rsid14423649\rsid14433442\rsid14434449\rsid14449014\rsid14767204\rsid14966991\rsid15014090\rsid15037607\rsid15154223\rsid15164683
\rsid15222194\rsid15297074\rsid15563859\rsid15753104\rsid15887650\rsid15892379\rsid15938284\rsid16268273\rsid16281285\rsid16451529\rsid16539341\rsid16592494\rsid16720946\rsid16731778}{\mmathPr\mmathFont34\mbrkBin0\mbrkBinSub0\msmallFrac0\mdispDef1
\mlMargin0\mrMargin0\mdefJc1\mwrapIndent1440\mintLim0\mnaryLim1}{\info{\title Private Declare Sub InitCommonControls Lib "comctl32}{\author CAM-C4 \'c0\'ee\'bd\'a8\'bb\'aa}{\operator JUJUMAO}{\creatim\yr2014\mo5\dy23\hr17\min17}
{\revtim\yr2015\mo10\dy24\hr11\min1}{\version159}{\edmins44}{\nofpages72}{\nofwords6808}{\nofchars86197}{\*\company WWW.YlmF.CoM}{\nofcharsws92820}{\vern32859}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}}
\paperw11906\paperh16838\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect 
\deftab420\ftnbj\aenddoc\trackmoves1\trackformatting1\donotembedsysfont0\relyonvml0\donotembedlingdata1\grfdocevents0\validatexml0\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0\showxmlerrors0\hyphcaps0\formshade\horzdoc\dgmargin\dghspace180
\dgvspace156\dghorigin1800\dgvorigin1440\dghshow0\dgvshow2\jcompress\ksulang2052\lnongrid
\viewkind1\viewscale100\splytwnine\ftnlytwnine\htmautsp\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule\nobrkwrptbl\snaptogridincell\allowfieldendsel\wrppunct\asianbrkrule\rsidroot5116891\newtblstyruls\nogrowautofit {\*\fchars 
!),.:\'3b?]\'7d\'a1\'a7\'a1\'a4\'a1\'a6\'a1\'a5\'a8\'44\'a1\'ac\'a1\'af\'a1\'b1\'a1\'ad\'a1\'c3\'a1\'a2\'a1\'a3\'a1\'a8\'a1\'a9\'a1\'b5\'a1\'b7\'a1\'b9\'a1\'bb\'a1\'bf\'a1\'b3\'a1\'bd\'a3\'a1\'a3\'a2\'a3\'a7\'a3\'a9\'a3\'ac\'a3\'ae\'a3\'ba\'a3\'bb\'a3\'bf\'a3\'dd\'a3\'e0\'a3\'fc\'a3\'fd\'a1\'ab\'a1\'e9
}{\*\lchars ([\'7b\'a1\'a4\'a1\'ae\'a1\'b0\'a1\'b4\'a1\'b6\'a1\'b8\'a1\'ba\'a1\'be\'a1\'b2\'a1\'bc\'a3\'a8\'a3\'ae\'a3\'db\'a3\'fb\'a1\'ea\'a3\'a4}\fet0{\*\wgrffmtfilter 2450}\ilfomacatclnup0{\*\ftnsep \ltrpar \pard\plain \ltrpar
\qj \li0\ri0\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid1715114 \rtlch\fcs1 \af0\afs21\alang1025 \ltrch\fcs0 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af13\cgrid\langnp1033\langfenp2052 {\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid1715114 \chftnsep 
\par }}{\*\ftnsepc \ltrpar \pard\plain \ltrpar\qj \li0\ri0\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid1715114 \rtlch\fcs1 \af0\afs21\alang1025 \ltrch\fcs0 
\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af13\cgrid\langnp1033\langfenp2052 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1715114 \chftnsepc 
\par }}{\*\aftnsep \ltrpar \pard\plain \ltrpar\qj \li0\ri0\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid1715114 \rtlch\fcs1 \af0\afs21\alang1025 \ltrch\fcs0 
\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af13\cgrid\langnp1033\langfenp2052 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1715114 \chftnsep 
\par }}{\*\aftnsepc \ltrpar \pard\plain \ltrpar\qj \li0\ri0\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid1715114 \rtlch\fcs1 \af0\afs21\alang1025 \ltrch\fcs0 
\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af13\cgrid\langnp1033\langfenp2052 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1715114 \chftnsepc 
\par }}\ltrpar \sectd \ltrsect\linex0\headery851\footery992\colsx425\endnhere\sectlinegrid312\sectspecifyl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta \dbch .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta \dbch .}}
{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta \dbch .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta \dbch )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb \dbch (}{\pntxta \dbch )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb \dbch (}{\pntxta \dbch )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb \dbch (}{\pntxta \dbch )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb \dbch (}{\pntxta \dbch )}}{\*\pnseclvl9
\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb \dbch (}{\pntxta \dbch )}}\pard\plain \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid1715114 \rtlch\fcs1 \af0\afs21\alang1025 \ltrch\fcs0 
\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af13\cgrid\langnp1033\langfenp2052 {\rtlch\fcs1 \af0\afs36 \ltrch\fcs0 \b\fs36\insrsid1077055 \hich\af0\dbch\af13\loch\f0 1.\hich\af0\dbch\af13\loch\f0 LoginActivity}{\rtlch\fcs1 \af0\afs36 
\ltrch\fcs0 \b\fs36\insrsid1077055\charrsid1077055 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1715114 \hich\af0\dbch\af13\loch\f0 package com.robotcontrol.activity;
\par 
\par \hich\af0\dbch\af13\loch\f0 import java.util.ArrayList;
\par \hich\af0\dbch\af13\loch\f0 import java.util.Date;
\par \hich\af0\dbch\af13\loch\f0 import java.util.HashMap;
\par \hich\af0\dbch\af13\loch\f0 import java.util.List;
\par \hich\af0\dbch\af13\loch\f0 import java.util.Map;
\par \hich\af0\dbch\af13\loch\f0 import java.u\hich\af0\dbch\af13\loch\f0 til.Timer;
\par \hich\af0\dbch\af13\loch\f0 import java.util.TimerTask;
\par 
\par \hich\af0\dbch\af13\loch\f0 import org.json.JSONException;
\par \hich\af0\dbch\af13\loch\f0 import org.json.JSONObject;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.EMCallBack;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.chat.EMChatManager;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.chat.EMGroupManager;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.application.BaseActivit\hich\af0\dbch\af13\loch\f0 y;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.application.Constant;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.application.DemoApplication;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.application.DemoHXSDKHelper;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.application.HXSDKHelper;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.application.User;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.application.UserDao;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.utils.HttpUtil;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.utils.InfoGet;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.utils.SmsContent;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.utils.ThreadPool;
\par 
\par \hich\af0\dbch\af13\loch\f0 import android.content.SharedPreferences;
\par \hich\af0\dbch\af13\loch\f0 impor\hich\af0\dbch\af13\loch\f0 t android.net.Uri;
\par \hich\af0\dbch\af13\loch\f0 import android.os.Bundle;
\par \hich\af0\dbch\af13\loch\f0 import android.os.Message;
\par \hich\af0\dbch\af13\loch\f0 import android.annotation.SuppressLint;
\par \hich\af0\dbch\af13\loch\f0 import android.content.Intent;
\par \hich\af0\dbch\af13\loch\f0 import android.os.Handler;
\par \hich\af0\dbch\af13\loch\f0 import android.text.TextUtils;
\par \hich\af0\dbch\af13\loch\f0 import android.util.Log;
\par \hich\af0\dbch\af13\loch\f0 import android.view.Menu;
\par \hich\af0\dbch\af13\loch\f0 impo\hich\af0\dbch\af13\loch\f0 rt android.view.MotionEvent;
\par \hich\af0\dbch\af13\loch\f0 import android.view.View;
\par \hich\af0\dbch\af13\loch\f0 import android.view.View.OnClickListener;
\par \hich\af0\dbch\af13\loch\f0 import android.widget.Button;
\par \hich\af0\dbch\af13\loch\f0 import android.widget.EditText;
\par \hich\af0\dbch\af13\loch\f0 import android.widget.Toast;
\par 
\par \hich\af0\dbch\af13\loch\f0 @SuppressLint("NewApi")
\par \hich\af0\dbch\af13\loch\f0 public class LoginActivity extends BaseActi\hich\af0\dbch\af13\loch\f0 vity implements OnClickListener \{
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 private EditText edit_phonenum;
\par \tab \hich\af0\dbch\af13\loch\f0 private EditText edit_vaildcode;
\par \tab \hich\af0\dbch\af13\loch\f0 private Button login;
\par \tab \hich\af0\dbch\af13\loch\f0 private Button freelogin;
\par \tab \hich\af0\dbch\af13\loch\f0 private boolean autoLogin = false;
\par \tab \hich\af0\dbch\af13\loch\f0 private Button getvaild;
\par \tab \hich\af0\dbch\af13\loch\f0 private SmsContent smsContent;
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \hich\af0\dbch\af13\loch\f0 protected void onCreate(Bundle savedInstanceState) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 super.onCreate(savedInstanceState);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 setContentView(R.layout.activity_login);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 SharedPreferences sharedPreferences = getSharedPreferences("userinfo",
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 MODE_PRIVATE);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 int id = sharedPr\hich\af0\dbch\af13\loch\f0 eferences.getInt("id", 0);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (DemoHXSDKHelper.getInstance().isLogined() && id != 0) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 autoLogin = true;
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 startActivity(new Intent(LoginActivity.this, ConnectActivity.class));
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 finish();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 return;
\par \tab \tab \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0 edit_phonenum = (EditText) findViewById(R.i\hich\af0\dbch\af13\loch\f0 d.edit_phonenumber);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 edit_vaildcode = (EditText) findViewById(R.id.edit_vaildcode);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 login = (Button) findViewById(R.id.btn_login);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 login.setOnClickListener(this);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 freelogin = (Button) findViewById(R.id.freelogin);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 freelogin.setOnClickListener(thi\hich\af0\dbch\af13\loch\f0 s);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 getvaild = (Button) findViewById(R.id.getvaild);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 getvaild.setOnClickListener(this);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 smsContent = new SmsContent(LoginActivity.this, new Handler(),
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 edit_vaildcode);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 this.getContentResolver().registerContentObserver(
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Uri.parse("content://sms/"), true, smsContent);
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 boolean progressShow;
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \hich\af0\dbch\af13\loch\f0 public void onClick(View v) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 switch (v.getId()) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 case R.id.btn_login:
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (edit_phonenum.getText() == null
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 || edit_phonenum.getText().toString().equals("")\hich\af0\dbch\af13\loch\f0 ) \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Toast.makeText(LoginActivity.this, "}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1715114 \loch\af0\hich\af0\dbch\f13 \'c7\'eb\'ca\'e4\'c8\'eb\'ca\'d6\'bb\'fa\'ba\'c5}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1715114 
\hich\af0\dbch\af13\loch\f0 ", Toast.LENGTH_LONG)
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 .show();
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 return;
\par \tab \tab \tab \}
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (edit_vaildcode.getText() == null
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 || edit_vaildcode.getText().toString().equals("")) \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Toast.makeText(LoginActivity.this, "}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1715114 \loch\af0\hich\af0\dbch\f13 \'c7\'eb\'ca\'e4\'c8\'eb\'d1\'e9\'d6\'a4\'c2\'eb}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1715114 
\hich\af0\dbch\af13\loch\f0 ", Toast\hich\af0\dbch\af13\loch\f0 .LENGTH_LONG)
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 .show();
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 return;
\par \tab \tab \tab \}
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 ThreadPool.execute(new Runnable() \{
\par 
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void run() \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (TextUtils.isEmpty(edit_vaildcode.getText())
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 || TextUtils.isEmpty(edit_vaildcode.getText())) \{
\par \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 HttpUtil httpUtil = new HttpUtil() \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void execute(JSONObject json) \{
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Log.i("json", json.toString());
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 try \{
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 SharedPreferences shared = getSharedPreferences(
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 "userinfo", MODE_PRIVATE);
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Shar\hich\af0\dbch\af13\loch\f0 edPreferences.Editor edit = shared.edit();
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 edit.putInt("id", json.getInt("id"));
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 edit.putString("session",
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 json.getString("session"));
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 edit.commit();
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 startActivity(new Intent(LoginActivity.this,
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 ConnectAc\hich\af0\dbch\af13\loch\f0 tivity.class));
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 finish();
\par \tab \tab \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  catch (JSONException e) \{
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 e.printStackTrace();
\par \tab \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 ;
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Map<String, String> parmas = new HashMap<String, String>();
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 parmas.put("phone", edit_phonenum.getText().toString());
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 p\hich\af0\dbch\af13\loch\f0 armas.put("verify", edit_vaildcode.getText().toString());
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 boolean flag = httpUtil.http(getString(R.string.url)
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 + "/sms/login/verify", parmas);
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (flag) \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 huanxinlogin("", "");
\par \tab \tab \tab \tab \tab \}
\par 
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 );
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \hich\af0\dbch\af13\loch\f0 case R.id.freelogin:
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 ThreadPool.execute(new Runnable() \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void run() \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 HttpUtil http = new HttpUtil() \{
\par 
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void execute(JSONObject json) \{
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 try \{
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 int ret = json.getInt("ret");
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (ret == 0) \{
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 SharedPreferences shared = getSharedPreferences(
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 "userinfo", MODE_PRIVATE);
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 SharedPreferences.Editor edit = shared
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 .edit();
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 edit.putInt("id", json.getInt("id"));
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 edit.putString("session",
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 json.\hich\af0\dbch\af13\loch\f0 getString("session"));
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 edit.commit();
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 startActivity(new Intent(
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 LoginActivity.this,
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 ConnectActivity.class));
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 finish();
\par \tab \tab \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  catch (JSONException e) \{
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 e.printStackTrace();
\par \tab \tab \tab \tab \tab \tab \tab \}
\par 
\par \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 ;
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String mac = InfoGet.getMac();
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String cpu = InfoGet.getCPUSerial();
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Map<String, String> params = new HashMap<String, String>();
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 params.put("unique_id", InfoGet.MD5((mac + cpu)));
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 boolean flag = http.http(getString(R.str\hich\af0\dbch\af13\loch\f0 ing.url)
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 + "/account/login/anno", params);
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Log.i("MD5", InfoGet.MD5((mac + cpu)));
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (flag)
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 huanxinlogin("", "");
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 );
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \hich\af0\dbch\af13\loch\f0 case R.id.getvaild:
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (TextUtils.isEmpty(edit_phonenum.getText())
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 || edit_phonenum.g\hich\af0\dbch\af13\loch\f0 etText().equals("")) \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 return;
\par \tab \tab \tab \}
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (index != 60) \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 return;
\par \tab \tab \tab \}
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 ThreadPool.execute(new Runnable() \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void run() \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 /*
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0  * HttpUtil httpUtil = new HttpUtil() \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0  * 
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0  * @Override public void execute(JSONObject json) \{ try \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0  * int ret = json.getInt("ret"); if (ret == 0) \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0  * 
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0  * \} \} catch (JSONException e) \{ e.printStackTrace(); \} \} \};
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0  * Map<String, String> params = new HashMap<String,
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0  * Stri\hich\af0\dbch\af13\loch\f0 ng>(); params.put("phone",
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0  * edit_phonenum.getText().toString());
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0  * httpUtil.http(getString(R.string.url) +
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0  * "/sms/send/verify", params);
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 final Timer timer = new Timer();
\par 
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 final Message msg=new Message();
\par \tab \tab \tab \tab \tab 
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 ti\hich\af0\dbch\af13\loch\f0 mer.scheduleAtFixedRate(new TimerTask() \{
\par 
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void run() \{
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (index == 0) \{
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 msg.what=1;
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 handlercode.sendMessage(msg);
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 timer.cancel();
\par \tab \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Log.i("Timer", index + "");
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 msg.what=0;
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 handlercode.sendMessage(msg);
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 index--;
\par \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 , new Date(), 1000);
\par \tab \tab \tab \tab \tab 
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 );
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \}
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 int flag = 0;
\par \tab \hich\af0\dbch\af13\loch\f0 Handler handlercode = new Handler() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 public void handlerMessage(android.os.Message msg) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 this.obtainMessage()\hich\af0\dbch\af13\loch\f0 ;
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if(msg.what==0)\{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 getvaild.setText("}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1715114 \loch\af0\hich\af0\dbch\f13 \'ca\'a3\'d3\'e0}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1715114 \hich\af0\dbch\af13\loch\f0 "+index+"}{\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid1715114 \loch\af0\hich\af0\dbch\f13 \'c3\'eb}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1715114 \hich\af0\dbch\af13\loch\f0 ");
\par \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 else if(msg.what==1)\{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 getvaild.setText("}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1715114 \loch\af0\hich\af0\dbch\f13 \'d6\'d8\'d0\'c2\'bb\'f1\'c8\'a1}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1715114 \hich\af0\dbch\af13\loch\f0 ");

\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 getvaild.setEnabled(true);
\par \tab \tab \tab \}
\par \tab \tab \tab 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 // new Thread(runnable).start();
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0 ;
\par \tab \}\hich\af0\dbch\af13\loch\f0 ;
\par \tab \hich\af0\dbch\af13\loch\f0 private View.OnTouchListener onTouchListener = new View.OnTouchListener() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \hich\af0\dbch\af13\loch\f0 public boolean onTouch(final View v, final MotionEvent event) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (event.getAction() == MotionEvent.ACTION_DOWN
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 || event.getAction() == MotionEvent.ACTION_MO\hich\af0\dbch\af13\loch\f0 VE) \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 handlercode.post(new Runnable() \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void run() \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (event.getAction() == MotionEvent.ACTION_UP) \{
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 handlercode.removeCallbacks(this);
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 return;
\par \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 switch (v.getId()) \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 case R.id.up:
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 execute("");
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 case R.id.left:
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 execute("");
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 case R.id.right:
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 execute("");
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 case R.id.down:
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 execute("");
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 case R.id.head_up:
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 execute("");
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break\hich\af0\dbch\af13\loch\f0 ;
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 case R.id.head_left:
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 execute("");
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 case R.id.head_right:
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 execute("");
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 case R.id.head_down:
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 execute("");
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 handlercode.postDelayed(this, 100);
\par \tab \tab \tab \tab \tab \}
\par 
\par \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 );
\par \tab \tab \tab \}
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 return false;
\par \tab \tab \}
\par \tab \}\hich\af0\dbch\af13\loch\f0 ;
\par \tab \hich\af0\dbch\af13\loch\f0 int index = 60;
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 private void execute(final String keycode) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 new Thread(new Runnable() \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void run() \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 HttpUtil httpUtil = new HttpUtil() \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void execute(JSONObject json) \{
\par 
\par \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 ;
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 JSONObject jsonObject = new JSONObject();
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 try \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 jsonObject.put("key", keycode);
\par \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  catch (JSONException e) \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 e.printStackTrace();
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Map<String, String> maps = new HashMap<String, String>();
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 maps.put("", "");
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 httpUtil.http("", maps);
\par \tab \tab \tab \}
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0 ).start();
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 private void huanxinlogin(String name, String pwd) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 EMChatManager.getInstance().login("test5", "asd", new EMCallBack() \{
\par 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void onSuccess() \{
\par 
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 DemoApplication.getInstance().s\hich\af0\dbch\af13\loch\f0 etUserName("test5");
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 DemoApplication.getInstance().setPassword("asd");
\par 
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 try \{
\par 
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 // ** manually load all local groups and
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 EMGroupManager.getInstance().loadAllGroups();
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 EMChatManager.getInstance().loadAllConversations();
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 initializeContacts();
\par \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  catch (Exception e) \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 e.printStackTrace();
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 runOnUiThread(new Runnable() \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void run() \{
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 DemoHXSDKHelper.getInstance().logout(true, null);
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Toast.makeText(getApplicationContext(),
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 R.str\hich\af0\dbch\af13\loch\f0 ing.login_failure_failed,
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Toast.LENGTH_SHORT).show();
\par \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 );
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 return;
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 boolean updatenick = EMChatManager.getInstance()
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 .updateCurrentUserNick(
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 DemoApplication.currentUserNick.trim());
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (!updatenick) \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Log.e("LoginActivity", "update current user nick fail");
\par \tab \tab \tab \tab \}
\par 
\par \tab \tab \tab \}
\par 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void onProgress(int progress, String status) \{
\par \tab \tab \tab \}
\par 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void onError(final int code, final String message) \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (!progressShow) \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 return;
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 runOnUiThread(new Runnable() \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void run() \{
\par 
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Toast.makeText(getApplicationContext(),
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 getString(R.string.Login_failed) + message,
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Toast.LENGTH_SHORT).show();
\par \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 );
\par \tab \tab \tab \}
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0 );
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 private void ini\hich\af0\dbch\af13\loch\f0 tializeContacts() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 Map<String, User> userlist = new HashMap<String, User>();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 // }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1715114 \loch\af0\hich\af0\dbch\f13 \'cc\'ed\'bc\'d3}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1715114 \hich\af0\dbch\af13\loch\f0 user"}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid1715114 \loch\af0\hich\af0\dbch\f13 \'c9\'ea\'c7\'eb\'d3\'eb\'cd\'a8\'d6\'aa}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1715114 \hich\af0\dbch\af13\loch\f0 "
\par \tab \tab \hich\af0\dbch\af13\loch\f0 User newFriends = new User();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 newFriends.setUsername(Constant.NEW_FRIENDS_USERNAME);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 String strChat = getResources().getString(
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 R.string.Applicatio\hich\af0\dbch\af13\loch\f0 n_and_notify);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 newFriends.setNick(strChat);
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 userlist.put(Constant.NEW_FRIENDS_USERNAME, newFriends);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 // }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1715114 \loch\af0\hich\af0\dbch\f13 \'cc\'ed\'bc\'d3}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1715114 \hich\af0\dbch\af13\loch\f0 "}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1715114 
\loch\af0\hich\af0\dbch\f13 \'c8\'ba\'c1\'c4}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1715114 \hich\af0\dbch\af13\loch\f0 "
\par \tab \tab \hich\af0\dbch\af13\loch\f0 User groupUser = new User();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 String strGroup = getResources().getString(R.string.group_chat);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 groupUser.setUsername(Constant.GROUP_USERNAME);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 groupUser.setNick(strGroup);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 groupUser.setHeader("");
\par \tab \tab \hich\af0\dbch\af13\loch\f0 userlist.put(Constant.GROUP_USERNAME, groupUser);
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 // }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1715114 \loch\af0\hich\af0\dbch\f13 \'cc\'ed\'bc\'d3}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1715114 \hich\af0\dbch\af13\loch\f0 "Robot"
\par \tab \tab \hich\af0\dbch\af13\loch\f0 User robotUser = new User();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 String strRobot = getResources().getString(R.stri\hich\af0\dbch\af13\loch\f0 ng.robot_chat);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 robotUser.setUsername(Constant.CHAT_ROBOT);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 robotUser.setNick(strRobot);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 robotUser.setHeader("");
\par \tab \tab \hich\af0\dbch\af13\loch\f0 userlist.put(Constant.CHAT_ROBOT, robotUser);
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 // }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1715114 \loch\af0\hich\af0\dbch\f13 \'b4\'e6\'c8\'eb\'c4\'da\'b4\'e6}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1715114 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 ((DemoHXSDKHelper) HXSDKHelper.getInstance()).setContactList(userlist);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 /\hich\af0\dbch\af13\loch\f0 / }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1715114 \loch\af0\hich\af0\dbch\f13 \'b4\'e6\'c8\'eb}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1715114 \hich\af0\dbch\af13\loch\f0 db
\par \tab \tab \hich\af0\dbch\af13\loch\f0 UserDao dao = new UserDao(LoginActivity.this);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 List<User> users = new ArrayList<User>(userlist.values());
\par \tab \tab \hich\af0\dbch\af13\loch\f0 dao.saveContactList(users);
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \hich\af0\dbch\af13\loch\f0 public boolean onCreateOptionsMenu(Menu menu) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 // Inflate the menu; this adds items to the\hich\af0\dbch\af13\loch\f0  action bar if it is present.
\par \tab \tab \hich\af0\dbch\af13\loch\f0 getMenuInflater().inflate(R.menu.login, menu);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 return true;
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \hich\af0\dbch\af13\loch\f0 protected void onDestroy() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 super.onDestroy();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (smsContent != null) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 this.getContentResolver().unregisterContentObserver(smsContent);
\par \tab \tab \}
\par \tab \}
\par \}}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1582767 
\par }\pard\plain \ltrpar\s3\ql \li0\ri0\sb260\sa260\sl416\slmult1\keep\keepn\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid7824919 \rtlch\fcs1 \ab\af0\afs32\alang1025 \ltrch\fcs0 
\b\fs32\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af13\cgrid\langnp1033\langfenp2052 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10051942 \hich\af0\dbch\af13\loch\f0 2}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4869087 .}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid4869087\charrsid4869087 \hich\af0\dbch\af13\loch\f0  }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10051942 \hich\af0\dbch\af13\loch\f0 Con\hich\af0\dbch\af13\loch\f0 nect\hich\af0\dbch\af13\loch\f0 Activity}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4869087 
\hich\af0\dbch\af13\loch\f0 .java}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4206013 
\par }\pard\plain \ltrpar\qj \li0\ri0\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid10051942 \rtlch\fcs1 \af0\afs21\alang1025 \ltrch\fcs0 
\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af13\cgrid\langnp1033\langfenp2052 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10051942 \hich\af0\dbch\af13\loch\f0 package com.robotcontrol.activity;
\par 
\par \hich\af0\dbch\af13\loch\f0 import android.annotation.SuppressLint;
\par \hich\af0\dbch\af13\loch\f0 import android.app.Activity;
\par \hich\af0\dbch\af13\loch\f0 import android.content.Context;
\par \hich\af0\dbch\af13\loch\f0 import android.content.Intent;
\par \hich\af0\dbch\af13\loch\f0 import android.content.SharedPreferences;
\par \hich\af0\dbch\af13\loch\f0 import android.net.wifi.p2p.WifiP2pDevice;
\par \hich\af0\dbch\af13\loch\f0 import android.net.wifi.p2p.WifiP2pDeviceList;
\par \hich\af0\dbch\af13\loch\f0 import android.net.wifi.p2p.WifiP2pManager;
\par \hich\af0\dbch\af13\loch\f0 import android.net.wifi.p2p.WifiP2pManager.ActionListener;
\par \hich\af0\dbch\af13\loch\f0 import android.os.Bundle;
\par \hich\af0\dbch\af13\loch\f0 import android.os.Looper;
\par \hich\af0\dbch\af13\loch\f0 import android.telephony.TelephonyManager;
\par \hich\af0\dbch\af13\loch\f0 import andr\hich\af0\dbch\af13\loch\f0 oid.view.Menu;
\par \hich\af0\dbch\af13\loch\f0 import android.view.MenuItem;
\par \hich\af0\dbch\af13\loch\f0 import android.view.View;
\par \hich\af0\dbch\af13\loch\f0 import android.widget.AdapterView;
\par \hich\af0\dbch\af13\loch\f0 import android.widget.ArrayAdapter;
\par \hich\af0\dbch\af13\loch\f0 import android.widget.ListView;
\par \hich\af0\dbch\af13\loch\f0 import android.widget.SimpleAdapter;
\par \hich\af0\dbch\af13\loch\f0 import android.widget.TextView;
\par \hich\af0\dbch\af13\loch\f0 import androi\hich\af0\dbch\af13\loch\f0 d.widget.Toast;
\par 
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.application.BaseActivity;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.bean.Robot;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.utils.Http;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.utils.HttpUtil;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.utils.ThreadPool;
\par 
\par \hich\af0\dbch\af13\loch\f0 import org.json.JSONArray;
\par \hich\af0\dbch\af13\loch\f0 import org.json.JSONException;
\par \hich\af0\dbch\af13\loch\f0 import org.json.JSONObject;
\par 
\par \hich\af0\dbch\af13\loch\f0 import java.util.ArrayList;
\par \hich\af0\dbch\af13\loch\f0 import java.util.Collection;
\par \hich\af0\dbch\af13\loch\f0 import java.util.HashMap;
\par \hich\af0\dbch\af13\loch\f0 import java.util.List;
\par \hich\af0\dbch\af13\loch\f0 import java.util.Map;
\par 
\par \hich\af0\dbch\af13\loch\f0 public class ConnectActivity extends BaseActivity implements View.O\hich\af0\dbch\af13\loch\f0 nClickListener \{
\par 
\par \hich\af0\dbch\af13\loch\f0     private ListView robots;
\par \hich\af0\dbch\af13\loch\f0     private TextView findrobot;
\par \hich\af0\dbch\af13\loch\f0     private SharedPreferences sharedPreferences;
\par 
\par \hich\af0\dbch\af13\loch\f0     @Override
\par \hich\af0\dbch\af13\loch\f0     protected void onCreate(Bundle savedInstanceState) \{
\par \hich\af0\dbch\af13\loch\f0         super.onCreate(savedInstanceState);
\par \hich\af0\dbch\af13\loch\f0         setC\hich\af0\dbch\af13\loch\f0 ontentView(R.layout.activity_connect);
\par \hich\af0\dbch\af13\loch\f0         robots = (ListView) findViewById(R.id.robotlist);
\par \hich\af0\dbch\af13\loch\f0         robots.setOnItemClickListener(itemClickListener);
\par \hich\af0\dbch\af13\loch\f0         findrobot = (TextView) findViewById(R.id.findrobot);
\par \hich\af0\dbch\af13\loch\f0         findrobot.setOnClickListener(thi\hich\af0\dbch\af13\loch\f0 s);
\par \hich\af0\dbch\af13\loch\f0         sharedPreferences = getSharedPreferences("userinfo", 0);
\par \hich\af0\dbch\af13\loch\f0     \}
\par 
\par \hich\af0\dbch\af13\loch\f0     @SuppressLint("NewApi") @Override
\par \hich\af0\dbch\af13\loch\f0     public void onClick(View v) \{
\par \hich\af0\dbch\af13\loch\f0     \tab new Thread(new Runnable() \{
\par \tab \tab \tab 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void run() \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 // TODO Auto-generated method stub
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0  final WifiP2pManager wifiP2pManager = (WifiP2pManager) getSystemService(WIFI_P2P_SERVICE);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0         final WifiP2pManager.Channel channel = wifiP2pManager.initialize(ConnectActivity.this, getMainLooper(), new Wi\hich\af0\dbch\af13\loch\f0 fiP2pManager.ChannelListener() \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0             @Override
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0             public void onChannelDisconnected() \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0             \}
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0         \});
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0         wifiP2pManager.discoverPeers(channel, new ActionListener() \{
\par \tab \tab \tab \tab \tab \tab 
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void \hich\af0\dbch\af13\loch\f0 onSuccess() \{
\par \tab \tab \tab \tab \tab \tab \tab 
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 wifiP2pManager.requestPeers(channel, new WifiP2pManager.PeerListListener() \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0             @Override
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0             public void onPeersAvailable(WifiP2pDeviceList peers) \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0                 Collection<WifiP2pDevice> col\hich\af0\dbch\af13\loch\f0 lection = peers.getDeviceList();
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0                 for (WifiP2pDevice wifiP2pDevice : collection) \{ 
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0                     Map<String, Object> map = new HashMap<String, Object>();
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0                     map.put("content", wifiP2pDevice.deviceName);
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0                     map.put("address", wifiP2pDevice.deviceAddress);
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0                     items.add(map);
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0                 \}
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0             \}
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0         \});
\par \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \tab 
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void onFailure(int arg0) \{
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 // TODO Auto-generated method stub
\par \tab \tab \tab \tab \tab \tab \tab 
\par \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 );
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0         
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0         
\par \tab \tab \tab \}
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0 ).start();
\par \hich\af0\dbch\af13\loch\f0     \tab setadapter();
\par \hich\af0\dbch\af13\loch\f0     \}
\par 
\par \hich\af0\dbch\af13\loch\f0     private AdapterView.OnItemClickListener itemClickListener = new AdapterView.OnItemClickListener() \{
\par \hich\af0\dbch\af13\loch\f0         @Overrid\hich\af0\dbch\af13\loch\f0 e
\par \hich\af0\dbch\af13\loch\f0         public void onItemClick(AdapterView<?> parent,final View view, int position, long id) \{
\par \hich\af0\dbch\af13\loch\f0         \tab  Intent intent = new Intent(ConnectActivity.this, ControlActivity.class);
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10051942 \hich\af0\dbch\af13\loch\f0              /*if (itemtext.equals("}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10051942 \loch\af0\hich\af0\dbch\f13 \'ce\'b4\'d5\'d2\'b5\'bd\'bb\'fa\'c6\'f7\'c8\'cb}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid10051942 \hich\af0\dbch\af13\loch\f0 ")) \{
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10051942 \hich\af0\dbch\af13\loch\f0                  return;
\par \hich\af0\dbch\af13\loch\f0              \}*/
\par \hich\af0\dbch\af13\loch\f0              intent.putExtra("username", "test2");
\par \hich\af0\dbch\af13\loch\f0              startActivity(intent);
\par \hich\af0\dbch\af13\loch\f0              finish();
\par \hich\af0\dbch\af13\loch\f0              
\par \hich\af0\dbch\af13\loch\f0             /*ThreadPool.execute(new Runnable() \{
\par \hich\af0\dbch\af13\loch\f0                 @Override
\par \hich\af0\dbch\af13\loch\f0                 public void run() \{
\par \hich\af0\dbch\af13\loch\f0    \hich\af0\dbch\af13\loch\f0                  HttpUtil httpUtil = new HttpUtil() \{
\par \hich\af0\dbch\af13\loch\f0                         @Override
\par \hich\af0\dbch\af13\loch\f0                         public void execute(JSONObject json) \{
\par \hich\af0\dbch\af13\loch\f0                         \tab  Robot robot = new Robot();
\par \hich\af0\dbch\af13\loch\f0                         \tab try \{
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 JSONArray jsonarray=json.getJSONArray("Robots");
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 JSONObject jsonobject= jsonarray.getJSONObject(0);
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0  robot.setId(jsonobject.getInt("id"));
\par \tab \hich\af0\dbch\af13\loch\f0                                 robot.setAddress(jsonobject.getString("addr"));
\par \tab \hich\af0\dbch\af13\loch\f0            \hich\af0\dbch\af13\loch\f0                      robot.setRid(jsonobject.getInt("rid"));
\par \tab \hich\af0\dbch\af13\loch\f0                                 robot.setRname(jsonobject.getString("rname"));
\par \tab \hich\af0\dbch\af13\loch\f0                                 robot.setRtype(jsonobject.getInt("rtype"));
\par \tab \hich\af0\dbch\af13\loch\f0                                 robot\hich\af0\dbch\af13\loch\f0 .setOnline(jsonobject.getBoolean("online"));
\par \tab \hich\af0\dbch\af13\loch\f0                                 robot.setController(jsonobject.getInt("controller"));
\par \tab \tab \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  catch (JSONException e1) \{
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 // TODO Auto-generated catch block
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 e1.printStackTrace();
\par \tab \tab \tab \tab \tab \tab \tab \}
\par \hich\af0\dbch\af13\loch\f0       \hich\af0\dbch\af13\loch\f0                       HttpUtil httpUtil1 = new HttpUtil() \{
\par \hich\af0\dbch\af13\loch\f0                                 @Override
\par \hich\af0\dbch\af13\loch\f0                                 public void execute(JSONObject json) \{
\par \hich\af0\dbch\af13\loch\f0                                     String itemtext = ((TextView) view.findViewById\hich\af0\dbch\af13\loch\f0 (R.id.robot_item)).getText().toString();
\par \hich\af0\dbch\af13\loch\f0                                     Intent intent = new Intent(ConnectActivity.this, ControlActivity.class);
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10051942 \hich\af0\dbch\af13\loch\f0                                     if (itemtext.equals("}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10051942 \loch\af0\hich\af0\dbch\f13 \'ce\'b4\'d5\'d2\'b5\'bd\'bb\'fa\'c6\'f7
\'c8\'cb}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10051942 \hich\af0\dbch\af13\loch\f0 ")) \{
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10051942 \hich\af0\dbch\af13\loch\f0                                      \hich\af0\dbch\af13\loch\f0    return;
\par \hich\af0\dbch\af13\loch\f0                                     \}
\par \hich\af0\dbch\af13\loch\f0                                     intent.putExtra("username", "test4");
\par \hich\af0\dbch\af13\loch\f0                                     startActivity(intent);
\par \hich\af0\dbch\af13\loch\f0                                     finish();
\par \hich\af0\dbch\af13\loch\f0                             \hich\af0\dbch\af13\loch\f0     \}
\par \hich\af0\dbch\af13\loch\f0                             \};
\par \hich\af0\dbch\af13\loch\f0                             Map<String, String> params = new HashMap<String, String>();
\par \hich\af0\dbch\af13\loch\f0                             params.put("id", sharedPreferences.getInt("id", 0) + "");
\par \hich\af0\dbch\af13\loch\f0                             params.put("session", sharedPreferences.getString("session", null));
\par \hich\af0\dbch\af13\loch\f0                             params.put("robot_id", robot.getRid() + "");
\par \hich\af0\dbch\af13\loch\f0                             params.put("robot_serial", "123456");
\par \hich\af0\dbch\af13\loch\f0                     \hich\af0\dbch\af13\loch\f0         params.put("robot_rtype", robot.getRtype() + "");
\par \hich\af0\dbch\af13\loch\f0                             httpUtil1.http(getString(R.string.url) + "/robot/bind", params);
\par \hich\af0\dbch\af13\loch\f0                         \}
\par \hich\af0\dbch\af13\loch\f0                     \};
\par \hich\af0\dbch\af13\loch\f0                     Map<String, String> params = new Has\hich\af0\dbch\af13\loch\f0 hMap<String, String>();
\par \hich\af0\dbch\af13\loch\f0                     params.put("id", sharedPreferences.getInt("id", 0) + "");
\par \hich\af0\dbch\af13\loch\f0                     params.put("session", sharedPreferences.getString("session", null));
\par \hich\af0\dbch\af13\loch\f0                     httpUtil.http(getString(R.string.url) + "/rob\hich\af0\dbch\af13\loch\f0 ot/info", params);
\par \hich\af0\dbch\af13\loch\f0                 \}
\par \hich\af0\dbch\af13\loch\f0             \});*/
\par \hich\af0\dbch\af13\loch\f0         \tab 
\par \hich\af0\dbch\af13\loch\f0         \}
\par \hich\af0\dbch\af13\loch\f0     \};
\par \hich\af0\dbch\af13\loch\f0     List<Map<String, Object>> items = new ArrayList<Map<String, Object>>();
\par 
\par \hich\af0\dbch\af13\loch\f0     private void setadapter() \{
\par \hich\af0\dbch\af13\loch\f0         if (items.size() == 0) \{
\par \hich\af0\dbch\af13\loch\f0             Map<String, Object> \hich\af0\dbch\af13\loch\f0 map = new HashMap<String, Object>();
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10051942 \hich\af0\dbch\af13\loch\f0             map.put("content", "}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10051942 \loch\af0\hich\af0\dbch\f13 \'ce\'b4\'d5\'d2\'b5\'bd\'bb\'fa\'c6\'f7\'c8\'cb}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid10051942 \hich\af0\dbch\af13\loch\f0 ");
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10051942 \hich\af0\dbch\af13\loch\f0             items.add(map);
\par \hich\af0\dbch\af13\loch\f0         \}
\par \hich\af0\dbch\af13\loch\f0         SimpleAdapter simpleAdapter = new SimpleAdapter(this, items, R.layout.robotitem, new String[]\{"content", "address"\}, new int[]\{R.id\hich\af0\dbch\af13\loch\f0 .robot_item, R.id.address\});
\par \hich\af0\dbch\af13\loch\f0         robots.setAdapter(simpleAdapter);
\par \hich\af0\dbch\af13\loch\f0     \}
\par 
\par \hich\af0\dbch\af13\loch\f0     @Override
\par \hich\af0\dbch\af13\loch\f0     public boolean onCreateOptionsMenu(Menu menu) \{
\par \hich\af0\dbch\af13\loch\f0         // Inflate the menu; this adds items to the action bar if it is present.
\par \hich\af0\dbch\af13\loch\f0         getMenuInflater().inflate(R.menu.connect, menu);
\par \hich\af0\dbch\af13\loch\f0         return true;
\par \hich\af0\dbch\af13\loch\f0     \}
\par 
\par \hich\af0\dbch\af13\loch\f0     @Override
\par \hich\af0\dbch\af13\loch\f0     public boolean onOptionsItemSelected(MenuItem item) \{
\par \hich\af0\dbch\af13\loch\f0         // Handle action bar item clicks here. The action bar will
\par \hich\af0\dbch\af13\loch\f0         // automatically handle \hich\af0\dbch\af13\loch\f0 clicks on the Home/Up button, so long
\par \hich\af0\dbch\af13\loch\f0         // as you specify a parent activity in AndroidManifest.xml.
\par \hich\af0\dbch\af13\loch\f0         int id = item.getItemId();
\par 
\par \hich\af0\dbch\af13\loch\f0         //noinspection SimplifiableIfStatement
\par \hich\af0\dbch\af13\loch\f0         if (id == R.id.action_settings) \{
\par \hich\af0\dbch\af13\loch\f0             return true;
\par \hich\af0\dbch\af13\loch\f0         \}
\par 
\par \hich\af0\dbch\af13\loch\f0         return super.onOptionsItemSelected(item);
\par \hich\af0\dbch\af13\loch\f0     \}
\par \}}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10051942\charrsid10051942 
\par }\pard\plain \ltrpar\s3\qj \li0\ri0\sb260\sa260\sl416\slmult1\keep\keepn\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid10952947 \rtlch\fcs1 \ab\af0\afs32\alang1025 \ltrch\fcs0 
\b\fs32\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af13\cgrid\langnp1033\langfenp2052 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4208783 \hich\af0\dbch\af13\loch\f0 3}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10952947 .}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid10952947\charrsid10952947 \hich\af0\dbch\af13\loch\f0  }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4208783 \hich\af0\dbch\af13\loch\f0 C\hich\af0\dbch\af13\loch\f0 ontrolActivity}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10952947 
\hich\af0\dbch\af13\loch\f0 .java}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4206013 
\par }\pard\plain \ltrpar\qj \li0\ri0\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid4208783 \rtlch\fcs1 \af0\afs21\alang1025 \ltrch\fcs0 
\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af13\cgrid\langnp1033\langfenp2052 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4208783 \hich\af0\dbch\af13\loch\f0 package com.robotcontrol.activity;
\par 
\par \hich\af0\dbch\af13\loch\f0 import android.app.AlertDialog;
\par \hich\af0\dbch\af13\loch\f0 import android.content.DialogInterface;
\par \hich\af0\dbch\af13\loch\f0 import android.content.Intent;
\par \hich\af0\dbch\af13\loch\f0 import android.content.SharedPreferences;
\par \hich\af0\dbch\af13\loch\f0 import android.content.pm.ActivityInfo;
\par \hich\af0\dbch\af13\loch\f0 import android.content.res.Configuration;
\par \hich\af0\dbch\af13\loch\f0 import android.graphics.Camera;
\par \hich\af0\dbch\af13\loch\f0 import android.media.AudioManager;
\par \hich\af0\dbch\af13\loch\f0 import android.media.MediaRecorder;
\par \hich\af0\dbch\af13\loch\f0 import android.media.RingtoneManager;
\par \hich\af0\dbch\af13\loch\f0 import android.media.SoundPool;
\par \hich\af0\dbch\af13\loch\f0 i\hich\af0\dbch\af13\loch\f0 mport android.net.ConnectivityManager;
\par \hich\af0\dbch\af13\loch\f0 import android.net.Uri;
\par \hich\af0\dbch\af13\loch\f0 import android.os.Bundle;
\par \hich\af0\dbch\af13\loch\f0 import android.app.Activity;
\par \hich\af0\dbch\af13\loch\f0 import android.os.Environment;
\par \hich\af0\dbch\af13\loch\f0 import android.os.Handler;
\par \hich\af0\dbch\af13\loch\f0 import android.os.SystemClock;
\par \hich\af0\dbch\af13\loch\f0 import android.telephony.TelephonyManager;
\par \hich\af0\dbch\af13\loch\f0 import\hich\af0\dbch\af13\loch\f0  android.util.Log;
\par \hich\af0\dbch\af13\loch\f0 import android.view.Menu;
\par \hich\af0\dbch\af13\loch\f0 import android.view.SurfaceHolder;
\par \hich\af0\dbch\af13\loch\f0 import android.view.SurfaceView;
\par \hich\af0\dbch\af13\loch\f0 import android.view.View;
\par \hich\af0\dbch\af13\loch\f0 import android.view.ViewGroup;
\par \hich\af0\dbch\af13\loch\f0 import android.view.WindowManager;
\par \hich\af0\dbch\af13\loch\f0 import android.view.animation.AlphaAnimation;
\par \hich\af0\dbch\af13\loch\f0 impor\hich\af0\dbch\af13\loch\f0 t android.view.animation.Animation;
\par \hich\af0\dbch\af13\loch\f0 import android.widget.Button;
\par \hich\af0\dbch\af13\loch\f0 import android.widget.Chronometer;
\par \hich\af0\dbch\af13\loch\f0 import android.widget.FrameLayout;
\par \hich\af0\dbch\af13\loch\f0 import android.widget.ImageView;
\par \hich\af0\dbch\af13\loch\f0 import android.widget.LinearLayout;
\par \hich\af0\dbch\af13\loch\f0 import android.widget.RelativeLayout;
\par \hich\af0\dbch\af13\loch\f0 import android.widget.TextView;
\par \hich\af0\dbch\af13\loch\f0 import android.widget.Toast;
\par 
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.chat.CmdMessageBody;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.chat.EMCallStateChangeListener;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.chat.EMChatManager;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.chat.EMCmdMessageBody;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.cha\hich\af0\dbch\af13\loch\f0 t.EMGroupManager;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.chat.EMMessage;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.chat.EMMessage.Type;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.chat.EMVideoCallHelper;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.chat.TextMessageBody;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.exceptions.EMServiceNotReadyException;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.ex\hich\af0\dbch\af13\loch\f0 ceptions.EaseMobException;
\par \hich\af0\dbch\af13\loch\f0 import com.iflytek.cloud.ErrorCode;
\par \hich\af0\dbch\af13\loch\f0 import com.iflytek.cloud.InitListener;
\par \hich\af0\dbch\af13\loch\f0 import com.iflytek.cloud.RecognizerListener;
\par \hich\af0\dbch\af13\loch\f0 import com.iflytek.cloud.RecognizerResult;
\par \hich\af0\dbch\af13\loch\f0 import com.iflytek.cloud.SpeechConstant;
\par \hich\af0\dbch\af13\loch\f0 import com.iflytek.cloud.\hich\af0\dbch\af13\loch\f0 SpeechError;
\par \hich\af0\dbch\af13\loch\f0 import com.iflytek.cloud.SpeechRecognizer;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.application.CallActivity;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.application.CameraHelper;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.application.HXSDKHelper;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.utils.HttpUtil;
\par \hich\af0\dbch\af13\loch\f0 import com.\hich\af0\dbch\af13\loch\f0 robotcontrol.widget.SwitchButton;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.widget.SwitchButton.OnChangeListener;
\par 
\par \hich\af0\dbch\af13\loch\f0 import org.jivesoftware.smack.Chat;
\par \hich\af0\dbch\af13\loch\f0 import org.json.JSONArray;
\par \hich\af0\dbch\af13\loch\f0 import org.json.JSONException;
\par \hich\af0\dbch\af13\loch\f0 import org.json.JSONObject;
\par 
\par \hich\af0\dbch\af13\loch\f0 import u.aly.bu;
\par \hich\af0\dbch\af13\loch\f0 import u.aly.v;
\par 
\par \hich\af0\dbch\af13\loch\f0 import java.util.HashMap;
\par \hich\af0\dbch\af13\loch\f0 import java.util.Map;
\par \hich\af0\dbch\af13\loch\f0 import java.util.UUID;
\par 
\par \hich\af0\dbch\af13\loch\f0 public class ControlActivity extends CallActivity implements
\par \tab \tab \hich\af0\dbch\af13\loch\f0 View.OnClickListener \{
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 private SurfaceView localSurface;
\par \tab \hich\af0\dbch\af13\loch\f0 private SurfaceHolder localSurfaceHolder;
\par \tab \hich\af0\dbch\af13\loch\f0 private static Sur\hich\af0\dbch\af13\loch\f0 faceView oppositeSurface;
\par \tab \hich\af0\dbch\af13\loch\f0 private SurfaceHolder oppositeSurfaceHolder;
\par \tab \hich\af0\dbch\af13\loch\f0 private boolean isMuteState;
\par \tab \hich\af0\dbch\af13\loch\f0 private boolean isHandsfreeState;
\par \tab \hich\af0\dbch\af13\loch\f0 private boolean isAnswered;
\par \tab \hich\af0\dbch\af13\loch\f0 private int streamID;
\par \tab \hich\af0\dbch\af13\loch\f0 private boolean endCallTriggerByMe = false;
\par \tab \hich\af0\dbch\af13\loch\f0 private boolean monit\hich\af0\dbch\af13\loch\f0 or = true;
\par \tab \hich\af0\dbch\af13\loch\f0 EMVideoCallHelper callHelper;
\par \tab \hich\af0\dbch\af13\loch\f0 private Handler handler = new Handler();
\par \tab \hich\af0\dbch\af13\loch\f0 private CameraHelper cameraHelper;
\par \tab \hich\af0\dbch\af13\loch\f0 private Button back;
\par \tab \hich\af0\dbch\af13\loch\f0 private Button chat;
\par \tab \hich\af0\dbch\af13\loch\f0 private ImageView speak;
\par \tab \hich\af0\dbch\af13\loch\f0 private Boolean speakflag = true;
\par \tab \hich\af0\dbch\af13\loch\f0 private SpeechRecognizer mIat;
\par \tab \hich\af0\dbch\af13\loch\f0 private ImageView up;
\par \tab \hich\af0\dbch\af13\loch\f0 private ImageView left;
\par \tab \hich\af0\dbch\af13\loch\f0 private ImageView right;
\par \tab \hich\af0\dbch\af13\loch\f0 private ImageView down;
\par \tab \hich\af0\dbch\af13\loch\f0 private ImageView head_up;
\par \tab \hich\af0\dbch\af13\loch\f0 private ImageView head_left;
\par \tab \hich\af0\dbch\af13\loch\f0 private ImageView head_right;
\par \tab \hich\af0\dbch\af13\loch\f0 private ImageView head_down;
\par \tab \hich\af0\dbch\af13\loch\f0 priva\hich\af0\dbch\af13\loch\f0 te SharedPreferences sharedPreferences;
\par \tab \hich\af0\dbch\af13\loch\f0 private SwitchButton videochange;
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \hich\af0\dbch\af13\loch\f0 protected void onCreate(Bundle savedInstanceState) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 super.onCreate(savedInstanceState);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (savedInstanceState != null) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 finish();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 return;
\par \tab \tab \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0 setContentV\hich\af0\dbch\af13\loch\f0 iew(R.layout.activity_control);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 sharedPreferences = getSharedPreferences("setting", MODE_PRIVATE);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 HXSDKHelper.getInstance().isVideoCalling = true;
\par \tab \tab \hich\af0\dbch\af13\loch\f0 msgid = UUID.randomUUID().toString();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 back = (Button) findViewById(R.id.back);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 back.setOnClickList\hich\af0\dbch\af13\loch\f0 ener(this);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 chat = (Button) findViewById(R.id.chat);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 chat.setOnClickListener(this);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 speak = (ImageView) findViewById(R.id.speak);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 speak.setOnClickListener(this);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 up = (ImageView) findViewById(R.id.up);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 up.setOnClickListener(this);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 left = (ImageView) findViewById(R.id.left);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 left.setOnClickListener(this);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 right = (ImageView) findViewById(R.id.right);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 right.setOnClickListener(this);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 down = (ImageView) findViewById(R.id.down);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 down.setOnClickListener(this);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 head_up = (Ima\hich\af0\dbch\af13\loch\f0 geView) findViewById(R.id.head_up);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 head_up.setOnClickListener(this);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 head_left = (ImageView) findViewById(R.id.head_left);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 head_left.setOnClickListener(this);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 head_right = (ImageView) findViewById(R.id.head_right);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 head_right.setOnClickListener(\hich\af0\dbch\af13\loch\f0 this);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 head_down = (ImageView) findViewById(R.id.head_down);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 head_down.setOnClickListener(this);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 videochange = (SwitchButton) findViewById(R.id.choose);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 videochange.setOnChangeListener(onchange);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 mIat = SpeechRecognizer.createRecognizer(ControlAc\hich\af0\dbch\af13\loch\f0 tivity.this, minit);
\par \tab \tab 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 isInComingCall = getIntent().getBooleanExtra("isComingCall", false);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 username = getIntent().getStringExtra("username");
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 localSurface = (SurfaceView) findViewById(R.id.local_surface);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 localSurface.setZOr\hich\af0\dbch\af13\loch\f0 derMediaOverlay(true);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 localSurface.setZOrderOnTop(true);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 localSurfaceHolder = localSurface.getHolder();
\par 
\par \tab \tab 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 callHelper = EMVideoCallHelper.getInstance();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 callHelper
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 .setResolution(getWindowManager().getDefaultDisplay()
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 .getWidth(), getWindowManager().getDefaultDisplay()
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 .getHeight());
\par \tab \tab \hich\af0\dbch\af13\loch\f0 cameraHelper = new CameraHelper(callHelper, localSurfaceHolder);
\par \tab \tab 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 oppositeSurface = (Surf\hich\af0\dbch\af13\loch\f0 aceView) findViewById(R.id.opposite_surface);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 oppositeSurfaceHolder = oppositeSurface.getHolder();
\par \tab 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 callHelper.setSurfaceView(oppositeSurface);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 localSurfaceHolder.addCallback(new LocalCallback());
\par \tab \tab \hich\af0\dbch\af13\loch\f0 oppositeSurfaceHolder\hich\af0\dbch\af13\loch\f0 .addCallback(new OppositeCallback());
\par 
\par \tab \tab 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 addCallStateListener();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (!isInComingCall) \{// 
\par 
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0  else \{ // 
\par 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 localSurface.setVisibility(View.INVISIBLE);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Uri ringUri = RingtoneManager
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 .getDefaultUri(RingtoneManager.T\hich\af0\dbch\af13\loch\f0 YPE_RINGTONE);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 audioManager.setMode(AudioManager.MODE_RINGTONE);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 audioManager.setSpeakerphoneOn(true);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 ringtone = RingtoneManager.getRingtone(this, ringUri);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 ringtone.play();
\par \tab \tab \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0 videochange.setEnabled(false);
\par 
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 private OnChangeListener onchange = new OnChangeListener() \{
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \hich\af0\dbch\af13\loch\f0 public void onChange(SwitchButton sb, boolean state) \{
\par 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (state) \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 CameraHelper.mheight = 240;
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 CameraHelper.mwidth = 320;
\par \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 CameraHelper.mheight = 480;
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 CameraHelper.mwidth = 640;
\par \tab \tab \tab \}
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 EMMessage ems = EMMessage.createSendMessage(Type.CMD);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 ems.setReceipt("robot001");
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 ems.setAttribute("width", CameraHelper.mwidth);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 ems.setAttribute("height", CameraHelper.mheight);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 ems.addBody(new CmdMessa\hich\af0\dbch\af13\loch\f0 geBody("yongyida.robot.video.changesize"));
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 try \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 EMChatManager.getInstance().sendMessage(ems);
\par \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  catch (EaseMobException e) \{
\par 
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 e.printStackTrace();
\par \tab \tab \tab \}
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 /* cameraHelper.stopCapture(); */
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 cameraHelper.startCapture();
\par \tab \tab \}
\par \tab \}\hich\af0\dbch\af13\loch\f0 ;
\par \tab \hich\af0\dbch\af13\loch\f0 private InitListener minit = new InitListener() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \hich\af0\dbch\af13\loch\f0 public void onInit(int i) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (i != ErrorCode.SUCCESS) \{
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4208783 \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Log.e("Error", "}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4208783 \loch\af0\hich\af0\dbch\f13 \'b4\'ed\'ce\'f3\'c2\'eb\'ce\'aa}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid4208783 \hich\af0\dbch\af13\loch\f0 :" + i);
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4208783 \tab \tab \tab \}
\par \tab \tab \}
\par \tab \}\hich\af0\dbch\af13\loch\f0 ;
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 boolean flag = false;
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 public void setParam() \{
\par \tab \tab 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 mIat.setParameter(S\hich\af0\dbch\af13\loch\f0 peechConstant.PARAMS, null);
\par 
\par \tab \tab 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 mIat.setParameter(SpeechConstant.ENGINE_TYPE, SpeechConstant.TYPE_CLOUD);
\par \tab \tab 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 mIat.setParameter(SpeechConstant.RESULT_TYPE, "json");
\par 
\par \tab 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 mIat.setParameter(SpeechConstant.LANGUAGE\hich\af0\dbch\af13\loch\f0 , "zh_cn");
\par \tab \tab 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 mIat.setParameter(SpeechConstant.ACCENT, "zh_cn");
\par \tab \tab \hich\af0\dbch\af13\loch\f0 mIat.setParameter(SpeechConstant.VAD_BOS, "4000");
\par 
\par \tab \tab 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 mIat.setParameter(SpeechConstant.VAD_EOS, "1000");
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 // 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 mIat.setParameter(SpeechConstant.ASR_PTT, "1");
\par 
\par }\pard \ltrpar\qj \li0\ri0\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3625243 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4208783 \tab \tab \hich\af0\dbch\af13\loch\f0 // 
\par }\pard \ltrpar\qj \li0\ri0\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid4208783 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4208783 \tab \tab \hich\af0\dbch\af13\loch\f0 
mIat.setParameter(SpeechConstant.AUDIO_FORMAT, "wav");
\par \tab \tab \hich\af0\dbch\af13\loch\f0 mIat.setParameter(SpeechConstant.ASR_AUDIO_PATH,
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Environment.getExternalStorageDirectory() + "/msc/iat.wav");
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab 
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 class LocalCallback implements SurfaceHolder.Callback \{
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \hich\af0\dbch\af13\loch\f0 public void surfaceCreated(SurfaceHolder holder) \{
\par \tab \tab \}
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \hich\af0\dbch\af13\loch\f0 public void surfaceChanged(SurfaceHolder holder, int format, int width,
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 int height) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 cameraHelper.startCapture();
\par \tab \tab \}
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \hich\af0\dbch\af13\loch\f0 public void surfaceDestroyed(SurfaceHolder holder) \{
\par \tab \tab \}
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab \hich\af0\dbch\af13\loch\f0  * }{\rtlch\fcs1 \af40 \ltrch\fcs0 \f40\insrsid4208783 \loch\af40\dbch\af13\hich\f40 \uc1\u-3\'3f}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4208783 \loch\af0\dbch\af13\hich\f0 \uc1\u1335\'3f}{\rtlch\fcs1 \af40 \ltrch\fcs0 
\f40\insrsid4208783 \loch\af40\dbch\af13\hich\f40 \uc1\u-3\'3f}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4208783 \hich\af0\dbch\af13\loch\f0 SurfaceHolder callback
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 class OppositeCallback implements SurfaceHolder.Callback \{
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \hich\af0\dbch\af13\loch\f0 public void surfaceCreated(Su\hich\af0\dbch\af13\loch\f0 rfaceHolder holder) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 holder.setType(SurfaceHolder.SURFACE_TYPE_GPU);
\par \tab \tab \}
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \hich\af0\dbch\af13\loch\f0 public void surfaceChanged(SurfaceHolder holder, int format, int width,
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 int height) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 callHelper.onWindowResize(width, height, format);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (!cameraHelper.\hich\af0\dbch\af13\loch\f0 isStarted()) \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Boolean wifistate = sharedPreferences.getBoolean("gprs", false);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(CONNECTIVITY_SERVICE);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (wifistate
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 && connectivityManager.getNetworkInfo(
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 ConnectivityManager.TYPE_MOBILE).isConnected()) \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 final AlertDialog.Builder builder = new AlertDialog.Builder(
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 ControlActivity.this);
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4208783 \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 builder.setMessage("}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4208783 \loch\af0\hich\af0\dbch\f13 \'b5\'b1\'c7\'b0\'ce\'aa\'d2\'c6\'b6\'af\'cd\'f8\'c2\'e7}{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4208783 ,}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4208783 \loch\af0\hich\af0\dbch\f13 \'bc\'cc\'d0\'f8\'b2\'a5\'b7\'c5\'c2\'f0}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4208783 \hich\af0\dbch\af13\loch\f0 ?");
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 builder.setNegativeButton("}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4208783 \loch\af0\hich\af0\dbch\f13 \'b7\'f1}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4208783 \hich\af0\dbch\af13\loch\f0 ",
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4208783 \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 new DialogInterface.OnClickListener() \{
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void onClick(DialogInterface dialog,
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 int which) \{
\par 
\par \tab \tab \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 );
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4208783 \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 builder.setPositiveButton("}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4208783 \loch\af0\hich\af0\dbch\f13 \'ca\'c7}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid4208783 \hich\af0\dbch\af13\loch\f0 ",
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4208783 \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 new DialogInterface.OnClickListener() \{
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Ov\hich\af0\dbch\af13\loch\f0 erride
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void onClick(DialogInterface dialog,
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 int which) \{
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 call();
\par \tab \tab \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 );
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 builder.show();
\par \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 call();
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 call();
\par \tab \tab \tab \}
\par \tab \tab \}
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \hich\af0\dbch\af13\loch\f0 public void surfaceDestroyed(Surfac\hich\af0\dbch\af13\loch\f0 eHolder holder) \{
\par \tab \tab \}
\par 
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 private void call() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (!isInComingCall) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 try \{
\par \tab \tab \tab 
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 EMChatManager.getInstance().makeVideoCall(username);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 videochange.setEnabled(true);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 \hich\f0 // \uc1\u872\'3f\loch\af0\dbch\af13\hich\f0 \u1450\'3f\hich\af0\dbch\af13\loch\f0 cameraHelper
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 cameraHelper.setStartFlag(true);
\par 
\par \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  catch (EMServiceNotReadyException e) \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Toast.makeText(ControlActivity.this,
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 R.string.Is_not_yet_connected_to_the_server,
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Toast.LENGTH_SHORT).show();
\par \tab \tab \tab \}
\par \tab \tab \}
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab \hich\af0\dbch\af13\loch\f0  
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 void a\hich\af0\dbch\af13\loch\f0 ddCallStateListener() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 callStateListener = new EMCallStateChangeListener() \{
\par 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void onCallStateChanged(CallState callState, CallError error) \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 // Message msg = handler.obtainMessage();
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 switch (callState) \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 case CONNECTING: 
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 runOnUiThread(new Runnable() \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void run() \{
\par 
\par \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 );
\par 
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par 
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 case CONNECTED: 
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 runOnUiThread(new Runnable() \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void run\hich\af0\dbch\af13\loch\f0 () \{
\par 
\par \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 );
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (ringtone != null)
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 ringtone.stop();
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (isInComingCall) \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 try \{
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 EMChatManager.getInstance().answerCall();
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 cameraHelper.setStartFlag(true);
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 openSpeakerOn();
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 isAnswered = true;
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 isHandsfreeState = true;
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 videochange.setEnabled(true);
\par \tab \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  catch (Exception e) \{
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 // TODO Auto-generated catch block
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 e.printStackTrace();
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 saveCallRecord(1);
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 finish();
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 return;
\par \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 localSurface.setVisibility(View.VISIBLE);
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par 
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 case ACCEPTED:
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 runOnUiThread(new Runnable() \{
\par 
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void run() \{
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 try \{
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (soundPool != null)
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 soundPool.stop(streamID);
\par \tab \tab \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  catch (Exception e) \{
\par \tab \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 openSpeakerOn();
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 EMChatManager.getInstance().isDirectCall();
\par 
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 isHandsfreeState = true;
\par 
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 callingState = CallingState.NORMAL;
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 startMonitor();
\par \tab \tab \tab \tab \tab \tab \}
\par 
\par \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 );
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3625243 \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 case DISCONNNECTED: }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4208783 
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 final CallError fError = error;
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 runOnUiThread(new Runnable() \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 private void postDelayedCloseMsg() \{
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 handler.postDelayed(new Runnable() \{
\par 
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void run() \{
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 saveCa\hich\af0\dbch\af13\loch\f0 llRecord(1);
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Animation animation = new AlphaAnimation(
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 1.0f, 0.0f);
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 animation.setDuration(800);
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 EMChatManager.getInstance().endCall();
\par \tab \tab \tab \tab \tab \tab \tab \tab \}
\par 
\par \tab \tab \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 , 200);
\par \tab \tab \tab \tab \tab \tab \}
\par 
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void run() \{
\par 
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String s1 = getResources().getString(
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 R.string.The_other_party_refused_to_accept);
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String s2 = getResources().getString(
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 R.string.Connection_failure);
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String s3 = getResources().getString(
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 R.string.The_other_party_is_not_online);
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String s4 = getResources().getString(
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 R.string.The_other_is_on_the_phone_please);
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String s5 = getResources().getString(
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 R.string.The_other_party_did_not_answer);
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Strin\hich\af0\dbch\af13\loch\f0 g s6 = getResources().getString(
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 R.string.hang_up);
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String s7 = getResources().getString(
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 R.string.The_other_is_hang_up);
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String s8 = getResources().getString(
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 R.string.did_not_answer);
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String s9 = getResourc\hich\af0\dbch\af13\loch\f0 es().getString(
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 R.string.Has_been_cancelled);
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (fError == CallError.REJECTED) \{
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 callingState = CallingState.BEREFUESD;
\par 
\par \tab \tab \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else if (fError == CallError.ERROR_TRANSPORT) \{
\par 
\par \tab \tab \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else if (fError == CallError.ERROR_INAVAILA\hich\af0\dbch\af13\loch\f0 BLE) \{
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 callingState = CallingState.OFFLINE;
\par 
\par \tab \tab \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else if (fError == CallError.ERROR_BUSY) \{
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 callingState = CallingState.BUSY;
\par 
\par \tab \tab \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else if (fError == CallError.ERROR_NORESPONSE) \{
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 callingState = CallingState.NORESPONSE;
\par 
\par \tab \tab \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else \{
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (isAnswered) \{
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 callingState = CallingState.NORMAL;
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (endCallTriggerByMe) \{
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 // callStateTextView.setText(s6);
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else \{
\par 
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else \{
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (isInComingCall) \{
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 callingState = CallingState.UNANSWERED;
\par 
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else \{
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (callingState != CallingState.NORMAL) \{
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 callingState = CallingState.CANCED;
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else \{
\par 
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 postDelayedCloseMs\hich\af0\dbch\af13\loch\f0 g();
\par 
\par \tab \tab \tab \tab \tab \tab \}
\par 
\par \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 );
\par 
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par 
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 default:
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \}
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0 ;
\par \tab \tab \hich\af0\dbch\af13\loch\f0 EMChatManager.getInstance().addVoiceCallStateChangeListener(
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 callStateListener);
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \hich\af0\dbch\af13\loch\f0 public void onClick(View v) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 switch (v.getId()) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 case R.id.back:
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 startActivity(new Intent(this, ConnectActivity.class));
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 EMChatManager.getInstance().endCall();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 saveCallRecord(1);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 finish();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \hich\af0\dbch\af13\loch\f0 case R.id.chat:
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Intent intent = new Intent(this, ChatActivity.class);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 intent.putExtra("chatType", 1);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 intent.putExtra("userId", "test4");
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 startActivity(intent);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 EMChatManager.getInstance().endCall();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 saveCallRecord(1);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 finish();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \hich\af0\dbch\af13\loch\f0 case R.id.speak:
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 EMVideoCallHelper.getInstance().pauseVoiceTransfer();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 // setParam();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 int cod\hich\af0\dbch\af13\loch\f0 e = mIat.startListening(recognizerListener);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (code != ErrorCode.SUCCESS) \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Log.e("Error", "}{\rtlch\fcs1 \af40 \ltrch\fcs0 \f40\insrsid5923363 \loch\af40\hich\af40\dbch\f13 \'b4\'ed\'ce\'f3\'c2\'eb\loch\af40\hich\af40\dbch\f13 \'ce\'aa}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4208783 
\hich\af0\dbch\af13\loch\f0 :" + code);
\par \tab \tab \tab \}
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 speakflag = false;
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \hich\af0\dbch\af13\loch\f0 case R.id.up:
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 execute("head");
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \hich\af0\dbch\af13\loch\f0 case R.id.left:
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 execute("left");
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \hich\af0\dbch\af13\loch\f0 case R.id.right:
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 execute("right");
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \hich\af0\dbch\af13\loch\f0 case R.id.down:
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 execute("behind");
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \hich\af0\dbch\af13\loch\f0 case R.id.head_up:
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 execute("");
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \hich\af0\dbch\af13\loch\f0 case R.id.head_left:
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 execute("");
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \hich\af0\dbch\af13\loch\f0 case R.id.head_right:
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 execute("");
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \hich\af0\dbch\af13\loch\f0 case R.i\hich\af0\dbch\af13\loch\f0 d.head_down:
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 execute("");
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \hich\af0\dbch\af13\loch\f0 default:
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \}
\par 
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 private void execute(final String code) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 new Thread(new Runnable() \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void run() \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 JSONObject jsonObject = new JSONObject();
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 try \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 jsonObject.put("type", "3");
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (code.equals("head"))
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 jsonObject.put("content",
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 "\{head:1,behind:0,left:0,right:0\}");
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 else if (code.equals("behind"))
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 jsonObject.put("content",
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 "\{head:0,behind:1,left:0,right:0\}");
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 else if (code.equals("left"))
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 jsonObject.put("content",
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 "\{head:0,behind:0,left:1,right:0\}");
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 else if (code.equals("right"))
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 jsonObject.put("content",
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 "\{head:0,behind:0,left:0,right:1\}");
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 jsonObject.put("code", code\hich\af0\dbch\af13\loch\f0 );
\par \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  catch (JSONException e) \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 e.printStackTrace();
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 HttpUtil.Scoket(jsonObject);
\par \tab \tab \tab \}
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0 ).start();
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 RecognizerListener recognizerListener = new RecognizerListener() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \hich\af0\dbch\af13\loch\f0 public void onVolumeChanged(int i, byte[] bytes) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Log.i("result", "onVolumeChanged");
\par \tab \tab \}
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \hich\af0\dbch\af13\loch\f0 public void onBeginOfSpeech() \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Log.i("result", "onBeginOfSpeech");
\par \tab \tab \}
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \hich\af0\dbch\af13\loch\f0 public void onEndOfSpeech() \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Log.i("result", "onBeginOfSpeech");
\par \tab \tab \}
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \hich\af0\dbch\af13\loch\f0 public void onResult\hich\af0\dbch\af13\loch\f0 (RecognizerResult recognizerResult, boolean b) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 final String content = recognizerResult.getResultString();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Log.i("result", content);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 EMVideoCallHelper.getInstance().restartVoiceTransfer();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 new Thread(new Runnable() \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public v\hich\af0\dbch\af13\loch\f0 oid run() \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 HttpUtil httpUtil = new HttpUtil() \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void execute(JSONObject json) \{
\par 
\par \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 ;
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Map<String, String> params = new HashMap<String, String>();
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 params.put("", "");
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 httpUtil.http("", params);
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 ).start();
\par \tab \tab \}
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \hich\af0\dbch\af13\loch\f0 public void onError(SpeechError speechError) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Log.i("result", "onError");
\par \tab \tab \}
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \hich\af0\dbch\af13\loch\f0 public void onEvent(int i, int i1, int i2, Bundle bundle) \{
\par 
\par \tab \tab \}
\par \tab \}\hich\af0\dbch\af13\loch\f0 ;
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \hich\af0\dbch\af13\loch\f0 public void onConfigurationChanged(Co\hich\af0\dbch\af13\loch\f0 nfiguration newConfig) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 // TODO Auto-generated method stub
\par \tab \tab \hich\af0\dbch\af13\loch\f0 super.onConfigurationChanged(newConfig);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) \{
\par 
\par \tab \tab \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0 else if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 setContentView(R.layout.activity_control);
\par \tab \tab \}
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \hich\af0\dbch\af13\loch\f0 protected void onDestroy() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 super.onDestroy();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 HXSDKHelper.getInstance().isVideoCalling = false;
\par \tab \tab \hich\af0\dbch\af13\loch\f0 stopMonitor\hich\af0\dbch\af13\loch\f0 ();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 try \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 callHelper.setSurfaceView(null);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 cameraHelper.stopCapture();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 oppositeSurface = null;
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 cameraHelper = null;
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0  catch (Exception e) \{
\par \tab \tab \}
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \hich\af0\dbch\af13\loch\f0 protected void onResume() \{
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 super.onResume();
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \hich\af0\dbch\af13\loch\f0 public void onBackPressed() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 EMChatManager.getInstance().endCall();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 saveCallRecord(1);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 startActivity(new Intent(this, ConnectActivity.class));
\par \tab \tab \hich\af0\dbch\af13\loch\f0 finish();
\par 
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 void startMonitor() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 new Thread(new Runn\hich\af0\dbch\af13\loch\f0 able() \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void run() \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 while (monitor) \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 runOnUiThread(new Runnable() \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void run() \{
\par 
\par \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 );
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 try \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Thread.sleep(1500);
\par \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  catch (InterruptedException e) \{
\par \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \}
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0 ).start();
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 void stopMonitor() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 monitor = false;
\par \tab \}
\par 
\par \}
\par \hich\af0\dbch\af13\loch\f0   }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4208783\charrsid4208783 
\par }\pard\plain \ltrpar\s3\qj \li0\ri0\sb260\sa260\sl416\slmult1\keep\keepn\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid11749075 \rtlch\fcs1 \ab\af0\afs32\alang1025 \ltrch\fcs0 
\b\fs32\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af13\cgrid\langnp1033\langfenp2052 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid5143419 \hich\af0\dbch\af13\loch\f0 5.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3625243 \hich\af0\dbch\af13\loch\f0 
ChatActivity}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid5143419 \hich\af0\dbch\af13\loch\f0 .java}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4206013 
\par }\pard\plain \ltrpar\qj \li0\ri0\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3625243 \rtlch\fcs1 \af0\afs21\alang1025 \ltrch\fcs0 
\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af13\cgrid\langnp1033\langfenp2052 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3625243 \hich\af0\dbch\af13\loch\f0 package com.robotcontrol.activity;
\par 
\par \hich\af0\dbch\af13\loch\f0 import java.io.File;
\par \hich\af0\dbch\af13\loch\f0 import java.io.FileOutputStream;
\par \hich\af0\dbch\af13\loch\f0 import java.io.IOException;
\par \hich\af0\dbch\af13\loch\f0 import java.lang.reflect.Field;
\par \hich\af0\dbch\af13\loch\f0 import java.util.ArrayList;
\par \hich\af0\dbch\af13\loch\f0 import java.util.List;
\par \hich\af0\dbch\af13\loch\f0 import\hich\af0\dbch\af13\loch\f0  java.util.Map;
\par 
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.EMChatRoomChangeListener;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.EMError;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.EMEventListener;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.EMNotifierEvent;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.EMValueCallBack;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.chat.EMChatManager;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.\hich\af0\dbch\af13\loch\f0 chat.EMChatRoom;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.chat.EMContactManager;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.chat.EMConversation;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.chat.EMGroup;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.chat.EMGroupManager;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.chat.EMMessage;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.chat.ImageMessageBody;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.chat.LocationMessageBody;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.chat.NormalFileMessageBody;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.chat.TextMessageBody;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.chat.VideoMessageBody;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.chat.VoiceMessageBody;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.chat.EMConversation.\hich\af0\dbch\af13\loch\f0 EMConversationType;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.chat.EMMessage.ChatType;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.exceptions.EaseMobException;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.util.EMLog;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.util.PathUtil;
\par \hich\af0\dbch\af13\loch\f0 import com.easemob.util.VoiceRecorder;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.application.Base\hich\af0\dbch\af13\loch\f0 Activity;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.application.CommonUtils;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.application.DemoApplication;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.application.DemoHXSDKHelper;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.application.ExpressionAdapter;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.application.\hich\af0\dbch\af13\loch\f0 ExpressionPagerAdapter;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.application.GroupRemoveListener;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.application.HXSDKHelper;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.application.MessageAdapter;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.application.RobotUser;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.app\hich\af0\dbch\af13\loch\f0 lication.UserUtils;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.application.VoicePlayClickListener;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.utils.ImageUtils;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.utils.SmileUtils;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.widget.ExpandGridView;
\par \hich\af0\dbch\af13\loch\f0 import com.robotcontrol.widget.PasteEditText;
\par 
\par \hich\af0\dbch\af13\loch\f0 import android.media.ThumbnailUtils;
\par \hich\af0\dbch\af13\loch\f0 import android.net.Uri;
\par \hich\af0\dbch\af13\loch\f0 import android.os.Build;
\par \hich\af0\dbch\af13\loch\f0 import android.os.Bundle;
\par \hich\af0\dbch\af13\loch\f0 import android.os.Handler;
\par \hich\af0\dbch\af13\loch\f0 import android.os.PowerManager;
\par \hich\af0\dbch\af13\loch\f0 import android.provider.MediaStore;
\par \hich\af0\dbch\af13\loch\f0 import android.app.Activity;
\par \hich\af0\dbch\af13\loch\f0 import android.app.AlertDialog;
\par \hich\af0\dbch\af13\loch\f0 import android.app.ProgressDialog;
\par \hich\af0\dbch\af13\loch\f0 import android.content.Context;
\par \hich\af0\dbch\af13\loch\f0 import android.content.Intent;
\par \hich\af0\dbch\af13\loch\f0 import android.database.Cursor;
\par \hich\af0\dbch\af13\loch\f0 import android.graphics.Bitmap;
\par \hich\af0\dbch\af13\loch\f0 import android.graphics.BitmapFactory;
\par \hich\af0\dbch\af13\loch\f0 import android.graphics\hich\af0\dbch\af13\loch\f0 .Color;
\par \hich\af0\dbch\af13\loch\f0 import android.graphics.Bitmap.CompressFormat;
\par \hich\af0\dbch\af13\loch\f0 import android.graphics.drawable.Drawable;
\par \hich\af0\dbch\af13\loch\f0 import android.support.v4.view.ViewPager;
\par \hich\af0\dbch\af13\loch\f0 import android.support.v4.widget.SwipeRefreshLayout;
\par \hich\af0\dbch\af13\loch\f0 import android.support.v4.widget.SwipeRefreshLayout.OnRefreshLi\hich\af0\dbch\af13\loch\f0 stener;
\par \hich\af0\dbch\af13\loch\f0 import android.text.ClipboardManager;
\par \hich\af0\dbch\af13\loch\f0 import android.text.Editable;
\par \hich\af0\dbch\af13\loch\f0 import android.text.TextUtils;
\par \hich\af0\dbch\af13\loch\f0 import android.text.TextWatcher;
\par \hich\af0\dbch\af13\loch\f0 import android.view.Gravity;
\par \hich\af0\dbch\af13\loch\f0 import android.view.Menu;
\par \hich\af0\dbch\af13\loch\f0 import android.view.MotionEvent;
\par \hich\af0\dbch\af13\loch\f0 import android.view.View;
\par \hich\af0\dbch\af13\loch\f0 im\hich\af0\dbch\af13\loch\f0 port android.view.WindowManager;
\par \hich\af0\dbch\af13\loch\f0 import android.view.View.OnClickListener;
\par \hich\af0\dbch\af13\loch\f0 import android.view.View.OnFocusChangeListener;
\par \hich\af0\dbch\af13\loch\f0 import android.view.View.OnTouchListener;
\par \hich\af0\dbch\af13\loch\f0 import android.view.inputmethod.InputMethodManager;
\par \hich\af0\dbch\af13\loch\f0 import android.widget.AbsListView;
\par \hich\af0\dbch\af13\loch\f0 import android.widget.AdapterView;
\par \hich\af0\dbch\af13\loch\f0 import android.widget.Button;
\par \hich\af0\dbch\af13\loch\f0 import android.widget.ImageView;
\par \hich\af0\dbch\af13\loch\f0 import android.widget.LinearLayout;
\par \hich\af0\dbch\af13\loch\f0 import android.widget.ListView;
\par \hich\af0\dbch\af13\loch\f0 import android.widget.ProgressBar;
\par \hich\af0\dbch\af13\loch\f0 import android.widget.RelativeLayout;
\par \hich\af0\dbch\af13\loch\f0 import android.wi\hich\af0\dbch\af13\loch\f0 dget.TextView;
\par \hich\af0\dbch\af13\loch\f0 import android.widget.Toast;
\par \hich\af0\dbch\af13\loch\f0 import android.widget.AbsListView.OnScrollListener;
\par \hich\af0\dbch\af13\loch\f0 import android.widget.AdapterView.OnItemClickListener;
\par 
\par \hich\af0\dbch\af13\loch\f0 public class ChatActivity extends BaseActivity implements OnClickListener,EMEventListener\{
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 private sta\hich\af0\dbch\af13\loch\f0 tic final String TAG = "ChatActivity";
\par \tab \hich\af0\dbch\af13\loch\f0 private static final int REQUEST_CODE_EMPTY_HISTORY = 2;
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int REQUEST_CODE_CONTEXT_MENU = 3;
\par \tab \hich\af0\dbch\af13\loch\f0 private static final int REQUEST_CODE_MAP = 4;
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int REQUEST_CODE_TEXT = 5;
\par \tab \hich\af0\dbch\af13\loch\f0 public\hich\af0\dbch\af13\loch\f0  static final int REQUEST_CODE_VOICE = 6;
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int REQUEST_CODE_PICTURE = 7;
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int REQUEST_CODE_LOCATION = 8;
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int REQUEST_CODE_NET_DISK = 9;
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int REQUEST_CODE_FILE = 10;
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int REQUEST_CODE_COPY_AND_PASTE = 11;
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int REQUEST_CODE_PICK_VIDEO = 12;
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int REQUEST_CODE_DOWNLOAD_VIDEO = 13;
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int REQUEST_CODE_VIDEO = 14;
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int REQUEST_\hich\af0\dbch\af13\loch\f0 CODE_DOWNLOAD_VOICE = 15;
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int REQUEST_CODE_SELECT_USER_CARD = 16;
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int REQUEST_CODE_SEND_USER_CARD = 17;
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int REQUEST_CODE_CAMERA = 18;
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int REQUEST_CODE_LOCAL = 19;
\par \tab \hich\af0\dbch\af13\loch\f0 public s\hich\af0\dbch\af13\loch\f0 tatic final int REQUEST_CODE_CLICK_DESTORY_IMG = 20;
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int REQUEST_CODE_GROUP_DETAIL = 21;
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int REQUEST_CODE_SELECT_VIDEO = 23;
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int REQUEST_CODE_SELECT_FILE = 24;
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int REQUEST_\hich\af0\dbch\af13\loch\f0 CODE_ADD_TO_BLACKLIST = 25;
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int RESULT_CODE_COPY = 1;
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int RESULT_CODE_DELETE = 2;
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int RESULT_CODE_FORWARD = 3;
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int RESULT_CODE_OPEN = 4;
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int RESULT_CO\hich\af0\dbch\af13\loch\f0 DE_DWONLOAD = 5;
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int RESULT_CODE_TO_CLOUD = 6;
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int RESULT_CODE_EXIT_GROUP = 7;
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int CHATTYPE_SINGLE = 1;
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int CHATTYPE_GROUP = 2;
\par \tab \hich\af0\dbch\af13\loch\f0 public static final int CHATTYPE_CHATROOM \hich\af0\dbch\af13\loch\f0 = 3;
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 public static final String COPY_IMAGE = "EASEMOBIMG";
\par \tab \hich\af0\dbch\af13\loch\f0 private View recordingContainer;
\par \tab \hich\af0\dbch\af13\loch\f0 private ImageView micImage;
\par \tab \hich\af0\dbch\af13\loch\f0 private TextView recordingHint;
\par \tab \hich\af0\dbch\af13\loch\f0 private ListView listView;
\par \tab \hich\af0\dbch\af13\loch\f0 private PasteEditText mEditTextContent;
\par \tab \hich\af0\dbch\af13\loch\f0 private View buttonSetModeKeyboard;
\par \tab \hich\af0\dbch\af13\loch\f0 private View buttonSetModeVoice;
\par \tab \hich\af0\dbch\af13\loch\f0 private View buttonSend;
\par \tab \hich\af0\dbch\af13\loch\f0 private View buttonPressToSpeak;
\par \tab \hich\af0\dbch\af13\loch\f0 // private ViewPager expressionViewpager;
\par \tab \hich\af0\dbch\af13\loch\f0 private LinearLayout emojiIconContainer;
\par \tab \hich\af0\dbch\af13\loch\f0 private LinearLayout btnContainer;
\par \tab \hich\af0\dbch\af13\loch\f0 pri\hich\af0\dbch\af13\loch\f0 vate ImageView locationImgview;
\par \tab \hich\af0\dbch\af13\loch\f0 private View more;
\par \tab \hich\af0\dbch\af13\loch\f0 private int position;
\par \tab \hich\af0\dbch\af13\loch\f0 private ClipboardManager clipboard;  
\par \tab \hich\af0\dbch\af13\loch\f0 private ViewPager expressionViewpager;
\par \tab \hich\af0\dbch\af13\loch\f0 private InputMethodManager manager;
\par \tab \hich\af0\dbch\af13\loch\f0 private List<String> reslist;
\par \tab \hich\af0\dbch\af13\loch\f0 private Drawable[] micImages;
\par \tab \hich\af0\dbch\af13\loch\f0 pr\hich\af0\dbch\af13\loch\f0 ivate int chatType;
\par \tab \hich\af0\dbch\af13\loch\f0 private EMConversation conversation;
\par \tab \hich\af0\dbch\af13\loch\f0 public static ChatActivity activityInstance = null;
\par \tab 
\par \tab \hich\af0\dbch\af13\loch\f0 private String toChatUsername;
\par \tab \hich\af0\dbch\af13\loch\f0 private VoiceRecorder voiceRecorder;
\par \tab \hich\af0\dbch\af13\loch\f0 private MessageAdapter adapter;
\par \tab \hich\af0\dbch\af13\loch\f0 private File cameraFile;
\par \tab \hich\af0\dbch\af13\loch\f0 static int resendPos;
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 private GroupListener groupListener;
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 private ImageView iv_emoticons_normal;
\par \tab \hich\af0\dbch\af13\loch\f0 private ImageView iv_emoticons_checked;
\par \tab \hich\af0\dbch\af13\loch\f0 private RelativeLayout edittext_layout;
\par \tab \hich\af0\dbch\af13\loch\f0 private ProgressBar loadmorePB;
\par \tab \hich\af0\dbch\af13\loch\f0 private boolean isloading;
\par \tab \hich\af0\dbch\af13\loch\f0 private final int pagesize = 20;
\par \tab \hich\af0\dbch\af13\loch\f0 private boolean haveMoreData = true;
\par \tab \hich\af0\dbch\af13\loch\f0 private Button btnMore;
\par \tab \hich\af0\dbch\af13\loch\f0 public String playMsgId;
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 private SwipeRefreshLayout swipeRefreshLayout;
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 private Handler micImageHandler = new Handler() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \hich\af0\dbch\af13\loch\f0 public void handle\hich\af0\dbch\af13\loch\f0 Message(android.os.Message msg) \{
\par \tab \tab 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 micImage.setImageDrawable(micImages[msg.what]);
\par \tab \tab \}
\par \tab \}\hich\af0\dbch\af13\loch\f0 ;
\par \tab \hich\af0\dbch\af13\loch\f0 public EMGroup group;
\par \tab \hich\af0\dbch\af13\loch\f0 public EMChatRoom room;
\par \tab \hich\af0\dbch\af13\loch\f0 public boolean isRobot;
\par \tab 
\par \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \hich\af0\dbch\af13\loch\f0 protected void onCreate(Bundle savedInstanceState) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 sup\hich\af0\dbch\af13\loch\f0 er.onCreate(savedInstanceState);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 setContentView(R.layout.activity_chat);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 activityInstance = this;
\par \tab \tab \hich\af0\dbch\af13\loch\f0 initView();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 setUpView();
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab \hich\af0\dbch\af13\loch\f0  * initView
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 protected void initView() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 recordingContainer = findViewById(R.id.recording_container);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 micImage = (ImageView) findViewById(R.id.mic_image);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 recordingHint = (TextView) findViewById(R.id.recording_hint);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 listView = (ListView) findViewById(R.id.list);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 mEditTextContent = (PasteEditText) findViewById(R.id.et_sendmessage);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 buttonSetModeK\hich\af0\dbch\af13\loch\f0 eyboard = findViewById(R.id.btn_set_mode_keyboard);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 edittext_layout = (RelativeLayout) findViewById(R.id.edittext_layout);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 buttonSetModeVoice = findViewById(R.id.btn_set_mode_voice);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 buttonSend = findViewById(R.id.btn_send);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 buttonPressToSpeak = fi\hich\af0\dbch\af13\loch\f0 ndViewById(R.id.btn_press_to_speak);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 expressionViewpager = (ViewPager) findViewById(R.id.vPager);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 emojiIconContainer = (LinearLayout) findViewById(R.id.ll_face_container);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 btnContainer = (LinearLayout) findViewById(R.id.ll_btn_container);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 locationI\hich\af0\dbch\af13\loch\f0 mgview = (ImageView) findViewById(R.id.btn_location);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 iv_emoticons_normal = (ImageView) findViewById(R.id.iv_emoticons_normal);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 iv_emoticons_checked = (ImageView) findViewById(R.id.iv_emoticons_checked);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 loadmorePB = (ProgressBar) findViewById(R.id.p\hich\af0\dbch\af13\loch\f0 b_load_more);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 btnMore = (Button) findViewById(R.id.btn_more);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 iv_emoticons_normal.setVisibility(View.VISIBLE);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 iv_emoticons_checked.setVisibility(View.INVISIBLE);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 more = findViewById(R.id.more);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 edittext_layout.setBackgroundResource(R.drawable.input_bar_bg_normal);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 voiceCallBtn = (ImageView) findViewById(R.id.btn_voice_call);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 videoCallBtn = (ImageView) findViewById(R.id.btn_video_call);
\par 
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 micImages = new Drawabl\hich\af0\dbch\af13\loch\f0 e[] \{ getResources().getDrawable(R.drawable.record_animate_01),
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 getResources().getDrawable(R.drawable.record_animate_02),
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 getResources().getDrawable(R.drawable.record_animate_03),
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 getResources().getDrawable(R.drawable.record_animate_04),
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 ge\hich\af0\dbch\af13\loch\f0 tResources().getDrawable(R.drawable.record_animate_05),
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 getResources().getDrawable(R.drawable.record_animate_06),
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 getResources().getDrawable(R.drawable.record_animate_07),
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 getResources().getDrawable(R.drawable.record_animate_08),
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 getResourc\hich\af0\dbch\af13\loch\f0 es().getDrawable(R.drawable.record_animate_09),
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 getResources().getDrawable(R.drawable.record_animate_10),
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 getResources().getDrawable(R.drawable.record_animate_11),
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 getResources().getDrawable(R.drawable.record_animate_12),
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 getResources().get\hich\af0\dbch\af13\loch\f0 Drawable(R.drawable.record_animate_13),
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 getResources().getDrawable(R.drawable.record_animate_14) \};
\par 
\par \tab \tab 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 reslist = getExpressionRes(35);
\par \tab 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 List<View> views = new ArrayList<View>();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 View gv1 = getGridChildView(1);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 View gv2 = getGridChildView(2);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 views.add(gv1);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 views.add(gv2);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 expressionViewpager.setAdapter(new ExpressionPagerAdapter(views));
\par \tab \tab \hich\af0\dbch\af13\loch\f0 edittext_layout.requestFocus();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 voiceRecorder = new VoiceRecorder(micImageHandler);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 buttonPressToSpeak.setOnTouchListener(new PressToSpeakListen());
\par \tab \tab \hich\af0\dbch\af13\loch\f0 mEditTextContent.setOnFocusChangeListener(new OnFocusChangeListener() \{
\par 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void onFocusChange(View v, boolean hasFocus) \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (hasFocus) \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 edittext_layout.set\hich\af0\dbch\af13\loch\f0 BackgroundResource(R.drawable.input_bar_bg_active);
\par \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 edittext_layout.setBackgroundResource(R.drawable.input_bar_bg_normal);
\par \tab \tab \tab \tab \}
\par 
\par \tab \tab \tab \}
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0 );
\par \tab \tab \hich\af0\dbch\af13\loch\f0 mEditTextContent.setOnClickListener(new OnClickListener() \{
\par 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void onClic\hich\af0\dbch\af13\loch\f0 k(View v) \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 edittext_layout.setBackgroundResource(R.drawable.input_bar_bg_active);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 more.setVisibility(View.GONE);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 iv_emoticons_normal.setVisibility(View.VISIBLE);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 iv_emoticons_checked.setVisibility(View.INVISIBLE);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 emojiIconContainer.se\hich\af0\dbch\af13\loch\f0 tVisibility(View.GONE);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 btnContainer.setVisibility(View.GONE);
\par \tab \tab \tab \}
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0 );
\par \tab \tab 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 mEditTextContent.addTextChangedListener(new TextWatcher() \{
\par 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void onTextChanged(CharSequence s, int start, int before, int count) \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (!TextUtils.isEmpty(s)) \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 btnMore.setVisibility(View.GONE);
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 buttonSend.setVisibility(View.VISIBLE);
\par \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 btnMore.setVisibility(View.VISIBLE);
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 buttonSend.setVisibility(View.GONE);
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \}
\par 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void be\hich\af0\dbch\af13\loch\f0 foreTextChanged(CharSequence s, int start, int count, int after) \{
\par \tab \tab \tab \}
\par 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void afterTextChanged(Editable s) \{
\par 
\par \tab \tab \tab \}
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0 );
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0  swipeRefreshLayout = (SwipeRefreshLayout) findViewById(R.id.chat_swipe_layout);
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0  swipeRefreshLayout.setCo\hich\af0\dbch\af13\loch\f0 lorSchemeResources(android.R.color.holo_blue_bright, android.R.color.holo_green_light,
\par \tab \tab \hich\af0\dbch\af13\loch\f0                  android.R.color.holo_orange_light, android.R.color.holo_red_light);
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0  swipeRefreshLayout.setOnRefreshListener(new OnRefreshListener() \{
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0          @Override
\par \tab \tab \hich\af0\dbch\af13\loch\f0          public void onRefresh() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0                  new Handler().postDelayed(new Runnable() \{
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0                          @Override
\par \tab \tab \hich\af0\dbch\af13\loch\f0                          public void run() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0                                  if (listView.get\hich\af0\dbch\af13\loch\f0 FirstVisiblePosition() == 0 && !isloading && haveMoreData) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0                                          List<EMMessage> messages;
\par \tab \tab \hich\af0\dbch\af13\loch\f0                                          try \{
\par \tab \hich\af0\dbch\af13\loch\f0                                                  if (chatType == CHATTYPE_SI\hich\af0\dbch\af13\loch\f0 NGLE)\{
\par \hich\af0\dbch\af13\loch\f0                                                          messages = conversation.loadMoreMsgFromDB(adapter.getItem(0).getMsgId(), pagesize);
\par \tab \hich\af0\dbch\af13\loch\f0                                                  \}
\par \tab \hich\af0\dbch\af13\loch\f0                                                  else\{
\par \hich\af0\dbch\af13\loch\f0                                                          messages = conversation.loadMoreGroupMsgFromDB(adapter.getItem(0).getMsgId(), pagesize);
\par \tab \hich\af0\dbch\af13\loch\f0                                                  \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0                                          \} catch (Except\hich\af0\dbch\af13\loch\f0 ion e1) \{
\par \tab \hich\af0\dbch\af13\loch\f0                                                  swipeRefreshLayout.setRefreshing(false);
\par \tab \hich\af0\dbch\af13\loch\f0                                                  return;
\par \tab \tab \hich\af0\dbch\af13\loch\f0                                          \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0                                          
\par \tab \tab \hich\af0\dbch\af13\loch\f0       \hich\af0\dbch\af13\loch\f0                                    if (messages.size() > 0) \{
\par \tab \hich\af0\dbch\af13\loch\f0                                                  adapter.notifyDataSetChanged();
\par \tab \hich\af0\dbch\af13\loch\f0                                                  adapter.refreshSeekTo(messages.size() - 1);
\par \tab \hich\af0\dbch\af13\loch\f0                  \hich\af0\dbch\af13\loch\f0                                 if (messages.size() != pagesize)\{
\par \tab \hich\af0\dbch\af13\loch\f0                                                      haveMoreData = false;
\par \tab \hich\af0\dbch\af13\loch\f0                                                  \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0                                          \} else \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0         \hich\af0\dbch\af13\loch\f0                                      haveMoreData = false;
\par \tab \tab \hich\af0\dbch\af13\loch\f0                                          \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0                                          
\par \tab \tab \hich\af0\dbch\af13\loch\f0                                          isloading = false;
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0                                  \}else\{
\par \tab \tab \hich\af0\dbch\af13\loch\f0                                      Toast.makeText(ChatActivity.this, getResources().getString(R.string.no_more_messages), Toast.LENGTH_SHORT).show();
\par \tab \tab \hich\af0\dbch\af13\loch\f0                                  \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0                                  swipeRefreshLayout.setRefreshi\hich\af0\dbch\af13\loch\f0 ng(false);
\par \tab \tab \hich\af0\dbch\af13\loch\f0                          \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0                  \}, 1000);
\par \tab \tab \hich\af0\dbch\af13\loch\f0          \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0  \});
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 private void setUpView() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 iv_emoticons_normal.setOnClickListener(this);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 iv_emoticons_checked.setOnClickListener(this);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 // position = getIntent().getIntExtr\hich\af0\dbch\af13\loch\f0 a("position", -1);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 clipboard = (ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 manager = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALW\hich\af0\dbch\af13\loch\f0 AYS_HIDDEN);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 wakeLock = ((PowerManager) getSystemService(Context.POWER_SERVICE)).newWakeLock(
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 PowerManager.SCREEN_DIM_WAKE_LOCK, "demo");
\par \tab 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 chatType = getIntent().getIntExtra("chatType", CHATTYPE_SINGLE);
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (chatType == CHATTYPE}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2634001 \hich\af0\dbch\af13\loch\f0 _SINGLE) \{ }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3625243 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 toChatUsername = getIntent().getStringExtra("userId");
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Map<String,RobotUser> robotMap=((DemoHXSDKHelper)HXSDKHelper.getInstance()).getRobotList();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if(robotMap!=null&&robotMap.containsKey(toChatUsername))\{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 isRobot = true;
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String nick = robotMap.get(toChatUsername).getNick();
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if(!TextUtils.isEmpty(nick))\{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 ((TextView) findViewById(R.id.name)).setText(nick);
\par \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 else\{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 ((TextView) findViewById(R.id.name)).setText(toChatUsername);
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 else\{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 UserUtils\hich\af0\dbch\af13\loch\f0 .setUserNick(toChatUsername, (TextView) findViewById(R.id.name));
\par \tab \tab \tab \}
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0  else \{
\par \tab \tab \tab 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 findViewById(R.id.container_to_group).setVisibility(View.VISIBLE);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 findViewById(R.id.container_remove).setVisibility(View.GONE);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 findViewById(R.id.containe\hich\af0\dbch\af13\loch\f0 r_voice_call).setVisibility(View.GONE);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 findViewById(R.id.container_video_call).setVisibility(View.GONE);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 toChatUsername = getIntent().getStringExtra("groupId");
\par 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if(chatType == CHATTYPE_GROUP)\{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0     onGroupViewCreation();
\par \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 else\{ 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0     onCh\hich\af0\dbch\af13\loch\f0 atRoomViewCreation();
\par \tab \tab \tab \}
\par \tab \tab \}
\par \hich\af0\dbch\af13\loch\f0         
\par \tab \tab \hich\af0\dbch\af13\loch\f0 // for chatroom type, we only init conversation and create view adapter on success
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if(chatType != CHATTYPE_CHATROOM)\{
\par \tab \tab \hich\af0\dbch\af13\loch\f0     onConversationInit();
\par \tab \hich\af0\dbch\af13\loch\f0         
\par \tab \hich\af0\dbch\af13\loch\f0         onListViewCreation();
\par \tab \hich\af0\dbch\af13\loch\f0         
\par \tab \hich\af0\dbch\af13\loch\f0         // show forward message if the message is not null
\par \tab \hich\af0\dbch\af13\loch\f0         String forward_msg_id = getIntent().getStringExtra("forward_msg_id");
\par \tab \hich\af0\dbch\af13\loch\f0         if (forward_msg_id != null) \{
\par \tab \hich\af0\dbch\af13\loch\f0          
\par \tab \hich\af0\dbch\af13\loch\f0             forwardMessage(forward_msg_id);
\par \tab \hich\af0\dbch\af13\loch\f0         \}
\par \tab \tab \}
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 protected void onConversationInit()\{
\par \tab \hich\af0\dbch\af13\loch\f0     if(chatType == CHATTYPE_SINGLE)\{
\par \tab \hich\af0\dbch\af13\loch\f0         conversation = EMChatManager.getInstance().getConversationByType(toChatUsername,EMConversationType.Chat);
\par \tab \hich\af0\dbch\af13\loch\f0     \}else if(chatType == CHATTYPE_GROUP)\{
\par \tab \hich\af0\dbch\af13\loch\f0   \hich\af0\dbch\af13\loch\f0       conversation = EMChatManager.getInstance().getConversationByType(toChatUsername,EMConversationType.GroupChat);
\par \tab \hich\af0\dbch\af13\loch\f0     \}else if(chatType == CHATTYPE_CHATROOM)\{
\par \tab \hich\af0\dbch\af13\loch\f0         conversation = EMChatManager.getInstance().getConversationByType(toChatUsername,EMCo\hich\af0\dbch\af13\loch\f0 nversationType.ChatRoom);
\par \tab \hich\af0\dbch\af13\loch\f0     \}
\par \tab \hich\af0\dbch\af13\loch\f0      
\par \hich\af0\dbch\af13\loch\f0       
\par \hich\af0\dbch\af13\loch\f0         conversation.markAllMessagesAsRead();
\par 
\par \hich\af0\dbch\af13\loch\f0      
\par \hich\af0\dbch\af13\loch\f0         // 
\par \hich\af0\dbch\af13\loch\f0         final List<EMMessage> msgs = conversation.getAllMessages();
\par \hich\af0\dbch\af13\loch\f0         int msgCount = msgs != null ? msgs.size() : 0;
\par \hich\af0\dbch\af13\loch\f0         if (msgCount < conversation.getAllMsgCount() && msgCount < pagesize) \{
\par \hich\af0\dbch\af13\loch\f0             String msgId = null;
\par \hich\af0\dbch\af13\loch\f0             if (msgs != null && msgs.size() > 0) \{
\par \hich\af0\dbch\af13\loch\f0                 msgId = msgs.get(0).getMsgId();
\par \hich\af0\dbch\af13\loch\f0             \}
\par \hich\af0\dbch\af13\loch\f0             if (chatType == CHATTYPE_SINGLE) \{
\par \hich\af0\dbch\af13\loch\f0                 conversation.loadMoreMsgFromDB(msgId, pagesize);
\par \hich\af0\dbch\af13\loch\f0             \} else \{
\par \hich\af0\dbch\af13\loch\f0           \hich\af0\dbch\af13\loch\f0       conversation.loadMoreGroupMsgFromDB(msgId, pagesize);
\par \hich\af0\dbch\af13\loch\f0             \}
\par \hich\af0\dbch\af13\loch\f0         \}
\par \hich\af0\dbch\af13\loch\f0         
\par \hich\af0\dbch\af13\loch\f0         EMChatManager.getInstance().addChatRoomChangeListener(new EMChatRoomChangeListener()\{
\par 
\par \hich\af0\dbch\af13\loch\f0             @Override
\par \hich\af0\dbch\af13\loch\f0             public void onChatRoomDestroyed(St\hich\af0\dbch\af13\loch\f0 ring roomId, String roomName) \{
\par \hich\af0\dbch\af13\loch\f0                 if(roomId.equals(toChatUsername))\{
\par \hich\af0\dbch\af13\loch\f0                     finish();
\par \hich\af0\dbch\af13\loch\f0                 \}
\par \hich\af0\dbch\af13\loch\f0             \}
\par 
\par \hich\af0\dbch\af13\loch\f0             @Override
\par \hich\af0\dbch\af13\loch\f0             public void onMemberJoined(String roomId, String participant) \{             \hich\af0\dbch\af13\loch\f0    
\par \hich\af0\dbch\af13\loch\f0             \}
\par 
\par \hich\af0\dbch\af13\loch\f0             @Override
\par \hich\af0\dbch\af13\loch\f0             public void onMemberExited(String roomId, String roomName,
\par \hich\af0\dbch\af13\loch\f0                     String participant) \{
\par \hich\af0\dbch\af13\loch\f0                 
\par \hich\af0\dbch\af13\loch\f0             \}
\par 
\par \hich\af0\dbch\af13\loch\f0             @Override
\par \hich\af0\dbch\af13\loch\f0             public void onMemberKicked(String roomId, String roomName,
\par \hich\af0\dbch\af13\loch\f0                     String participant) \{
\par \hich\af0\dbch\af13\loch\f0                 if(roomId.equals(toChatUsername))\{
\par \hich\af0\dbch\af13\loch\f0                     String curUser = EMChatManager.getInstance().getCurrentUser();
\par \hich\af0\dbch\af13\loch\f0          \hich\af0\dbch\af13\loch\f0            if(curUser.equals(participant))\{
\par \hich\af0\dbch\af13\loch\f0                         EMChatManager.getInstance().leaveChatRoom(toChatUsername);
\par \hich\af0\dbch\af13\loch\f0                         finish();
\par \hich\af0\dbch\af13\loch\f0                     \}
\par \hich\af0\dbch\af13\loch\f0                 \}
\par \hich\af0\dbch\af13\loch\f0             \}
\par \hich\af0\dbch\af13\loch\f0             
\par \hich\af0\dbch\af13\loch\f0         \});
\par \tab \}
\par \tab 
\par \tab \hich\af0\dbch\af13\loch\f0 protected \hich\af0\dbch\af13\loch\f0 void onListViewCreation()\{
\par \hich\af0\dbch\af13\loch\f0         adapter = new MessageAdapter(ChatActivity.this, toChatUsername, chatType);
\par \hich\af0\dbch\af13\loch\f0        
\par \hich\af0\dbch\af13\loch\f0         listView.setAdapter(adapter);
\par \hich\af0\dbch\af13\loch\f0         
\par \hich\af0\dbch\af13\loch\f0         listView.setOnScrollListener(new ListScrollListener());
\par \hich\af0\dbch\af13\loch\f0         adapter.r\hich\af0\dbch\af13\loch\f0 efreshSelectLast();
\par 
\par \hich\af0\dbch\af13\loch\f0         listView.setOnTouchListener(new OnTouchListener() \{
\par 
\par \hich\af0\dbch\af13\loch\f0             @Override
\par \hich\af0\dbch\af13\loch\f0             public boolean onTouch(View v, MotionEvent event) \{
\par \hich\af0\dbch\af13\loch\f0                 hideKeyboard();
\par \hich\af0\dbch\af13\loch\f0                 more.setVisibility(View.GONE);
\par \hich\af0\dbch\af13\loch\f0                 iv_emoticons_normal.setVisibility(View.VISIBLE);
\par \hich\af0\dbch\af13\loch\f0                 iv_emoticons_checked.setVisibility(View.INVISIBLE);
\par \hich\af0\dbch\af13\loch\f0                 emojiIconContainer.setVisibility(View.GONE);
\par \hich\af0\dbch\af13\loch\f0                 btnContainer.setVisibility(View.GONE);
\par \hich\af0\dbch\af13\loch\f0        \hich\af0\dbch\af13\loch\f0          return false;
\par \hich\af0\dbch\af13\loch\f0             \}
\par \hich\af0\dbch\af13\loch\f0         \});
\par \tab \}
\par \tab 
\par \tab \hich\af0\dbch\af13\loch\f0 protected void onGroupViewCreation()\{
\par \tab \hich\af0\dbch\af13\loch\f0     group = EMGroupManager.getInstance().getGroup(toChatUsername);
\par \hich\af0\dbch\af13\loch\f0         
\par \hich\af0\dbch\af13\loch\f0         if (group != null)\{
\par \hich\af0\dbch\af13\loch\f0             ((TextView) findViewById(R.id.name)).setText(g\hich\af0\dbch\af13\loch\f0 roup.getGroupName());
\par \hich\af0\dbch\af13\loch\f0         \}else\{
\par \hich\af0\dbch\af13\loch\f0             ((TextView) findViewById(R.id.name)).setText(toChatUsername);
\par \hich\af0\dbch\af13\loch\f0         \}
\par \hich\af0\dbch\af13\loch\f0         
\par \hich\af0\dbch\af13\loch\f0       
\par \hich\af0\dbch\af13\loch\f0         groupListener = new GroupListener();
\par \hich\af0\dbch\af13\loch\f0         EMGroupManager.getInstance().addGroupCh\hich\af0\dbch\af13\loch\f0 angeListener(groupListener);
\par \tab \}
\par \tab 
\par \tab \hich\af0\dbch\af13\loch\f0 protected void onChatRoomViewCreation()\{
\par \hich\af0\dbch\af13\loch\f0         findViewById(R.id.container_to_group).setVisibility(View.GONE);
\par \hich\af0\dbch\af13\loch\f0         
\par \hich\af0\dbch\af13\loch\f0         final ProgressDialog pd = ProgressDialog.show(this, "", "Joining......");
\par \hich\af0\dbch\af13\loch\f0         EMChatMan\hich\af0\dbch\af13\loch\f0 ager.getInstance().joinChatRoom(toChatUsername, new EMValueCallBack<EMChatRoom>() \{
\par \hich\af0\dbch\af13\loch\f0         
\par \hich\af0\dbch\af13\loch\f0         @Override
\par \hich\af0\dbch\af13\loch\f0         public void onSuccess(EMChatRoom value) \{
\par \hich\af0\dbch\af13\loch\f0             // TODO Auto-generated method stub
\par \hich\af0\dbch\af13\loch\f0              runOnUiThread(new Runnable()\{
\par \hich\af0\dbch\af13\loch\f0                    @Override
\par \hich\af0\dbch\af13\loch\f0                    public void run()\{
\par \hich\af0\dbch\af13\loch\f0                         pd.dismiss();
\par \hich\af0\dbch\af13\loch\f0                         room = EMChatManager.getInstance().getChatRoom(toChatUsername);
\par \hich\af0\dbch\af13\loch\f0                         if(room !=null)\{
\par \hich\af0\dbch\af13\loch\f0                       \hich\af0\dbch\af13\loch\f0       ((TextView) findViewById(R.id.name)).setText(room.getName());
\par \hich\af0\dbch\af13\loch\f0                         \}else\{
\par \hich\af0\dbch\af13\loch\f0                             ((TextView) findViewById(R.id.name)).setText(toChatUsername);
\par \hich\af0\dbch\af13\loch\f0                         \}
\par \hich\af0\dbch\af13\loch\f0                         EMLog.d(TAG, "joi\hich\af0\dbch\af13\loch\f0 n room success : " + room.getName());
\par \hich\af0\dbch\af13\loch\f0                         
\par \hich\af0\dbch\af13\loch\f0                         onConversationInit();
\par \hich\af0\dbch\af13\loch\f0                         
\par \hich\af0\dbch\af13\loch\f0                         onListViewCreation();
\par \hich\af0\dbch\af13\loch\f0                    \}
\par \hich\af0\dbch\af13\loch\f0                \});
\par \hich\af0\dbch\af13\loch\f0         \}
\par \hich\af0\dbch\af13\loch\f0         
\par \hich\af0\dbch\af13\loch\f0         @Override
\par \hich\af0\dbch\af13\loch\f0         public void onError(final int error, String errorMsg) \{
\par \hich\af0\dbch\af13\loch\f0                 // TODO Auto-generated method stub
\par \hich\af0\dbch\af13\loch\f0                 EMLog.d(TAG, "join room failure : " + error);
\par \hich\af0\dbch\af13\loch\f0                runOnUiThread(new Runnable()\{
\par \hich\af0\dbch\af13\loch\f0                    @Override
\par \hich\af0\dbch\af13\loch\f0                    public void run()\{
\par \hich\af0\dbch\af13\loch\f0                        pd.dismiss();
\par \hich\af0\dbch\af13\loch\f0                    \}
\par \hich\af0\dbch\af13\loch\f0                \});
\par \hich\af0\dbch\af13\loch\f0                finish();
\par \hich\af0\dbch\af13\loch\f0             \}
\par \hich\af0\dbch\af13\loch\f0         \});
\par \tab \}
\par \tab 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab \hich\af0\dbch\af13\loch\f0  * onActivityResult
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 protected void onActivityResult(int requestCode, int \hich\af0\dbch\af13\loch\f0 resultCode, Intent data) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 super.onActivityResult(requestCode, resultCode, data);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (resultCode == RESULT_CODE_EXIT_GROUP) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 setResult(RESULT_OK);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 finish();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 return;
\par \tab \tab \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (requestCode == REQUEST_CODE_CONTEXT_MENU) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 switch (resultCode) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 case RESULT_CODE_COPY:
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 EMMessage copyMsg = ((EMMessage) adapter.getItem(data.getIntExtra("position", -1)));
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 // clipboard.setText(SmileUtils.getSmiledText(ChatActivity.this,
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 // ((TextMessageBody) copyMsg.getBody()).getMessage()))\hich\af0\dbch\af13\loch\f0 ;
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 clipboard.setText(((TextMessageBody) copyMsg.getBody()).getMessage());
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 case RESULT_CODE_DELETE:
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 EMMessage deleteMsg = (EMMessage) adapter.getItem(data.getIntExtra("position", -1));
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 conversation.removeMessage(deleteMsg.getMsgId());
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 adapter.refreshSeekTo(data.getIntExtra("position", adapter.getCount()) - 1);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 case RESULT_CODE_FORWARD: 
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 EMMessage forwardMsg = (EMMessage) adapter.getItem(data.getIntExtr\hich\af0\dbch\af13\loch\f0 a("position", 0));
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Intent intent = new Intent(this, ForwardMessageActivity.class);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 intent.putExtra("forward_msg_id", forwardMsg.getMsgId());
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 startActivity(intent);
\par \tab \tab \tab \tab 
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 default:
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \tab \}
\par \tab \tab \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (resultCode == RESULT_OK) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (requestCode == REQUEST_CODE_EMPTY_HISTORY) \{
\par \tab \tab \tab \tab 
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 EMChatManager.getInstance().clearConversation(toChatUsername);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 adapter.refresh();
\par \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else if (request}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2634001 \hich\af0\dbch\af13\loch\f0 Code == REQUEST_CODE_CAMERA) \{ }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3625243 
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (cameraFile != null \hich\af0\dbch\af13\loch\f0 && cameraFile.exists())
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 sendPicture(cameraFile.getAbsolutePath());
\par \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else if (requestCode == REQUEST_CODE_SELECT_VIDEO) \{ // 
\par 
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 int duration = data.getIntExtra("dur", 0);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String videoPath = data.getStringExtra("path");
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 File\hich\af0\dbch\af13\loch\f0  file = new File(PathUtil.getInstance().getImagePath(), "thvideo" + System.currentTimeMillis());
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Bitmap bitmap = null;
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 FileOutputStream fos = null;
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 try \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (!file.getParentFile().exists()) \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 file.getParentFile().mkdirs();
\par \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 bitmap = ThumbnailUtils.createVideoThumbnail(videoPath, 3);
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (bitmap == null) \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 EMLog.d("chatactivity", "problem load video thumbnail bitmap,use default icon");
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.app_pa\hich\af0\dbch\af13\loch\f0 nel_video_icon);
\par \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 fos = new FileOutputStream(file);
\par 
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 bitmap.compress(CompressFormat.JPEG, 100, fos);
\par 
\par \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  catch (Exception e) \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 e.printStackTrace();
\par \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  finally \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (fos != null) \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 try \{
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 fos.close();
\par \tab \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  catc\hich\af0\dbch\af13\loch\f0 h (IOException e) \{
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 e.printStackTrace();
\par \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 fos = null;
\par \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (bitmap != null) \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 bitmap.recycle();
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 bitmap = null;
\par \tab \tab \tab \tab \tab \}
\par 
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 sendVideo(videoPath, file.getAbsolutePath(), duration / 1000);
\par 
\par \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else if (requestCode == REQUEST_CODE_LOCAL) \{ /
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (data != null) \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Uri selectedImage = data.getData();
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (selectedImage != null) \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 sendPicByUri(selectedImage);
\par \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else if (requestCode == REQUEST_CODE_SEL\hich\af0\dbch\af13\loch\f0 ECT_FILE) \{ // 
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (data != null) \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Uri uri = data.getData();
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (uri != null) \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 sendFile(uri);
\par \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \}
\par 
\par \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else if (requestCode == REQUEST_CODE_MAP) \{ // 
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 double latitude = data.getDoubleExtra("latitude", 0);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 double longitude = data.getDoubleExtra("longitude", 0);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String locationAddress = data.getStringExtra("address");
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (locationAddress != null && !locationAddress.equals("")) \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0     toggleMore(more);
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 sendLocationMsg(latitude, longitude, ""\hich\af0\dbch\af13\loch\f0 , locationAddress);
\par \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String st = getResources().getString(R.string.unable_to_get_loaction);
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Toast.makeText(this, st, 0).show();
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \tab 
\par \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else if (requestCode == REQUEST_CODE_TEXT || requestCode == REQUEST_CODE_VOICE
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 || requestCode == REQUEST_CODE_PICTURE || requestCode == REQUEST_CODE_LOCATION
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 || requestCode == REQUEST_CODE_VIDEO || requestCode == REQUEST_CODE_FILE) \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 resendMessage();
\par \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else if (requestCode == REQUEST_CODE_COPY_AND_PASTE) \{
\par \tab \tab \tab \tab 
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (!TextUtils.isEmpty(clipboard.getText())) \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String pasteText = clipboard.getText().toString();
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (pasteText.startsWith(COPY_IMAGE)) \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 sendPicture(pasteText.replace(COPY_IMAGE, ""));
\par \tab \tab \tab \tab \tab \}
\par 
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else if (requestCode == REQUEST_CODE_ADD_TO_BLACKLIST) \{ // 
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 EMMessage deleteMsg = (EMMessage) adapter.getItem(data.getIntExtra("position", -1));
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 addUserToBlacklist(deleteMsg.getFrom());
\par \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else if (conversation.getMsgCount() > 0) \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 adapter.refresh();
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 setResult(RESULT_OK);
\par \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else if (requestCode == REQUEST_CODE_GROUP_DETAIL) \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 adapter.refresh();
\par \tab \tab \tab \}
\par \tab \tab \}
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab \hich\af0\dbch\af13\loch\f0  * 
\par \tab \hich\af0\dbch\af13\loch\f0  * @param view
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \hich\af0\dbch\af13\loch\f0 public void onClick(View view) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 String st1 = getResources().getString(R.string.not_connect_to_server);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 int id = view.getId();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (id == R.id.btn_send) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String s = mEditTextContent.getText().toString();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 sendText(s);
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0  else if (id == R.id.btn_take_pic\hich\af0\dbch\af13\loch\f0 ture) \{
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2634001 \tab \tab \tab \hich\af0\dbch\af13\loch\f0 selectPicFromCamera();}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3625243 
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0  else if (id == R.id.btn_picture) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 selectPicFromLocal(); //
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0  else if (id == R.id.btn_location) \{ 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 //startActivityForResult(new Intent(this, BaiduMapActivity.class), REQUEST_CODE_MAP\hich\af0\dbch\af13\loch\f0 );
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0  else if (id == R.id.iv_emoticons_normal) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 more.setVisibility(View.VISIBLE);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 iv_emoticons_normal.setVisibility(View.INVISIBLE);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 iv_emoticons_checked.setVisibility(View.VISIBLE);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 btnContainer.setVisibility(View.GONE);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 em\hich\af0\dbch\af13\loch\f0 ojiIconContainer.setVisibility(View.VISIBLE);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 hideKeyboard();
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0  else if (id == R.id.iv_emoticons_checked) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 iv_emoticons_normal.setVisibility(View.VISIBLE);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 iv_emoticons_checked.setVisibility(View.INVISIBLE);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 btnContainer.setVi\hich\af0\dbch\af13\loch\f0 sibility(View.VISIBLE);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 emojiIconContainer.setVisibility(View.GONE);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 more.setVisibility(View.GONE);
\par 
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0  else if (id == R.id.btn_video) \{
\par \hich\af0\dbch\af13\loch\f0 //\tab \tab \tab Intent intent = new Intent(ChatActivity.this, ImageGridActivity.class);
\par \hich\af0\dbch\af13\loch\f0 //\tab \tab \tab startActivityForResult(intent, REQUEST_CODE_SELECT_VIDEO);
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0  else if (id == R.id.btn_file) \{\tab \tab \tab \hich\af0\dbch\af13\loch\f0 selectFileFromLocal();
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0  else if (id == R.id.btn_voice_call) \{ 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (!EMChatManager.getInstance().isConnected())
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Toas\hich\af0\dbch\af13\loch\f0 t.makeText(this, st1, Toast.LENGTH_SHORT).show();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 else\{
\par \hich\af0\dbch\af13\loch\f0 //\tab \tab \tab \tab startActivity(new Intent(ChatActivity.this, VoiceCallActivity.class).putExtra("username",
\par \hich\af0\dbch\af13\loch\f0 //\tab \tab \tab \tab \tab \tab toChatUsername).putExtra("isComingCall", false));
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 voiceCallBtn.setEnabled(false);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 tog\hich\af0\dbch\af13\loch\f0 gleMore(null);
\par \tab \tab \tab \}
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0  else if (id == R.id.btn_video_call) \{ 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 /*if (!EMChatManager.getInstance().isConnected())
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Toast.makeText(this, st1, Toast.LENGTH_SHORT).show();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 else\{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 startActivity(new Intent(this, VideoCallActivity.class).putE\hich\af0\dbch\af13\loch\f0 xtra("username", toChatUsername).putExtra(
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 "isComingCall", false));
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 videoCallBtn.setEnabled(false);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 toggleMore(null);
\par \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 */
\par \tab \tab \}
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab \hich\af0\dbch\af13\loch\f0  * 
\par \tab \hich\af0\dbch\af13\loch\f0  * see \{@link EMNotifierEvent\}
\par \hich\af0\dbch\af13\loch\f0      */
\par \hich\af0\dbch\af13\loch\f0     @Override
\par \hich\af0\dbch\af13\loch\f0     public void onEvent(EMNotifierEvent event) \{
\par \hich\af0\dbch\af13\loch\f0         switch (event.getEvent()) \{
\par \hich\af0\dbch\af13\loch\f0         case EventNewMessage:
\par \hich\af0\dbch\af13\loch\f0         \{
\par \hich\af0\dbch\af13\loch\f0             EMMessage message = (EMMessage) event.getData();
\par \hich\af0\dbch\af13\loch\f0             
\par \hich\af0\dbch\af13\loch\f0             String username = \hich\af0\dbch\af13\loch\f0 null;
\par \hich\af0\dbch\af13\loch\f0    \hich\af0\dbch\af13\loch\f0             if(message.getChatType() == ChatType.GroupChat || message.getChatType() == ChatType.ChatRoom)\{
\par \hich\af0\dbch\af13\loch\f0                 username = message.getTo();
\par \hich\af0\dbch\af13\loch\f0             \}
\par \hich\af0\dbch\af13\loch\f0             else\{
\par \hich\af0\dbch\af13\loch\f0   \hich\af0\dbch\af13\loch\f0                 user\hich\af0\dbch\af13\loch\f0 name = message.getFrom();
\par \hich\af0\dbch\af13\loch\f0             \}
\par 
\par \hich\af0\dbch\af13\loch\f0             if(username.equals(getToChatUsername()))\{
\par \hich\af0\dbch\af13\loch\f0                 refreshUIWithNewMessage();
\par \hich\af0\dbch\af13\loch\f0  \hich\af0\dbch\af13\loch\f0                 HXSDKHelper.getInstance(\hich\af0\dbch\af13\loch\f0 ).getNotifier().viberateAndPlayTone(message);
\par \hich\af0\dbch\af13\loch\f0             \}else\{
\par \hich\af0\dbch\af13\loch\f0                 HXSDKHelper.getInstance().getNotifier().onNewMsg(message);
\par \hich\af0\dbch\af13\loch\f0             \}
\par 
\par \hich\af0\dbch\af13\loch\f0             break;
\par \hich\af0\dbch\af13\loch\f0         \}
\par \hich\af0\dbch\af13\loch\f0         case EventDeliveryAck:
\par }\pard \ltrpar\qj \li0\ri0\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid7288375 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3625243 \hich\af0\dbch\af13\loch\f0         \{
\par }\pard \ltrpar\qj \li0\ri0\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3625243 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3625243 \hich\af0\dbch\af13\loch\f0             EMMessage message = (EMMessage) event.getData();

\par \hich\af0\dbch\af13\loch\f0             refreshUI();
\par \hich\af0\dbch\af13\loch\f0             break;
\par \hich\af0\dbch\af13\loch\f0         \}
\par \hich\af0\dbch\af13\loch\f0         case EventReadAck:
\par \hich\af0\dbch\af13\loch\f0         \{
\par \hich\af0\dbch\af13\loch\f0            
\par \hich\af0\dbch\af13\loch\f0          \hich\af0\dbch\af13\loch\f0    EMMessage message = (EMMessage) event.getData();
\par \hich\af0\dbch\af13\loch\f0             refreshUI();
\par \hich\af0\dbch\af13\loch\f0             break;
\par \hich\af0\dbch\af13\loch\f0         \}
\par \hich\af0\dbch\af13\loch\f0         case EventOfflineMessage:
\par \hich\af0\dbch\af13\loch\f0         \{
\par \hich\af0\dbch\af13\loch\f0             //a list of offline messages 
\par \hich\af0\dbch\af13\loch\f0             //List<EMMessage> offlineMessages = (List<EMMessage>\hich\af0\dbch\af13\loch\f0 ) event.getData();
\par \hich\af0\dbch\af13\loch\f0             refreshUI();
\par \hich\af0\dbch\af13\loch\f0             break;
\par \hich\af0\dbch\af13\loch\f0         \}
\par \hich\af0\dbch\af13\loch\f0         default:
\par \hich\af0\dbch\af13\loch\f0             break;
\par \hich\af0\dbch\af13\loch\f0         \}
\par \hich\af0\dbch\af13\loch\f0         
\par \hich\af0\dbch\af13\loch\f0     \}
\par \tab 
\par \tab 
\par \tab \hich\af0\dbch\af13\loch\f0 private void refreshUIWithNewMessage()\{
\par \tab \hich\af0\dbch\af13\loch\f0     if(adapter == null)\{
\par \tab \hich\af0\dbch\af13\loch\f0         return;
\par \tab \hich\af0\dbch\af13\loch\f0     \}
\par \tab \hich\af0\dbch\af13\loch\f0     
\par \tab \hich\af0\dbch\af13\loch\f0     runOnUiThread(new Runnable() \{
\par \hich\af0\dbch\af13\loch\f0             public void run() \{
\par \hich\af0\dbch\af13\loch\f0                 adapter.refreshSelectLast();
\par \hich\af0\dbch\af13\loch\f0             \}
\par \hich\af0\dbch\af13\loch\f0         \});
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 private void refreshUI() \{
\par \tab \hich\af0\dbch\af13\loch\f0     if(adapter == null)\{
\par \hich\af0\dbch\af13\loch\f0             return;
\par \hich\af0\dbch\af13\loch\f0         \}
\par \tab \hich\af0\dbch\af13\loch\f0     
\par \tab \tab \hich\af0\dbch\af13\loch\f0 runOnUiThread(new Run\hich\af0\dbch\af13\loch\f0 nable() \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void run() \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 adapter.refresh();
\par \tab \tab \tab \}
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0 );
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab 
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 public void selectPicFromCamera() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (!CommonUtils.isExitsSdcard()) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String st = getResources().getString(R.string.sd_card_does_not_exist);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Toast.makeText(getApplicationContext(), st,Toast.LENGTH_SHORT).show();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 return;
\par \tab \tab \}
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 cameraFile = new File(PathUtil.getInstance().getImagePath(), DemoApplication.getInstance().getUserName()
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 + System.currentTimeMillis() + ".jpg");
\par \tab \tab \hich\af0\dbch\af13\loch\f0 cameraFile.ge\hich\af0\dbch\af13\loch\f0 tParentFile().mkdirs();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 startActivityForResult(
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 new Intent(MediaStore.ACTION_IMAGE_CAPTURE).putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(cameraFile)),
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 REQUEST_CODE_CAMERA);
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 private void selectFileFromLocal() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 Intent\hich\af0\dbch\af13\loch\f0  intent = null;
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (Build.VERSION.SDK_INT < 19) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 intent = new Intent(Intent.ACTION_GET_CONTENT);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 intent.setType("*/*");
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 intent.addCategory(Intent.CATEGORY_OPENABLE);
\par 
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0  else \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 intent = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
\par \tab \tab \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0 startActivityForResult(intent, REQUEST_CODE_SELECT_FILE);
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 public void selectPicFromLocal() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 Intent intent;
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if\hich\af0\dbch\af13\loch\f0  (Build.VERSION.SDK_INT < 19) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 intent = new Intent(Intent.ACTION_GET_CONTENT);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 intent.setType("image/*");
\par 
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0  else \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 intent = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
\par \tab \tab \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0 startActivityForRe\hich\af0\dbch\af13\loch\f0 sult(intent, REQUEST_CODE_LOCAL);
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab 
\par \tab \hich\af0\dbch\af13\loch\f0  * 
\par \tab \hich\af0\dbch\af13\loch\f0  * @param content
\par \tab \hich\af0\dbch\af13\loch\f0  *            message content
\par \tab \hich\af0\dbch\af13\loch\f0  * @param isResend
\par \tab \hich\af0\dbch\af13\loch\f0  *            boolean resend
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 public void sendText(String content) \{
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (content.length() > 0) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 EMMessage message = EMMessage.createSendMessage(EMMessage.Type.TXT);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (chatType == CHATTYPE_GROUP)\{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0     message.setChatType(ChatType.GroupChat);
\par \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 else if(chatType == CHATTYPE_CHATROOM)\{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0     message.setC\hich\af0\dbch\af13\loch\f0 hatType(ChatType.ChatRoom);
\par \tab \tab \tab \}
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if(isRobot)\{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 message.setAttribute("em_robot_message", true);
\par \tab \tab \tab \}
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 TextMessageBody txtBody = new TextMessageBody(content);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 message.addBody(txtBody);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 message.setReceipt(toChatUsername);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 conversation.addMessage(message);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 adapter.refreshSelectLast();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 mEditTextContent.setText("");
\par 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 setR\hich\af0\dbch\af13\loch\f0 esult(RESULT_OK);
\par 
\par \tab \tab \}
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab 
\par \tab \hich\af0\dbch\af13\loch\f0  * 
\par \tab \hich\af0\dbch\af13\loch\f0  * @param filePath
\par \tab \hich\af0\dbch\af13\loch\f0  * @param fileName
\par \tab \hich\af0\dbch\af13\loch\f0  * @param length
\par \tab \hich\af0\dbch\af13\loch\f0  * @param isResend
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 private void sendVoice(String filePath, String fileName, String length, boolean isResend) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (!(new File(filePath).exists())) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 return;
\par \tab \tab \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0 try \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 final EMMessage message = EMMessage.createSendMessage(EMMessage.Type.VOICE);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (chatType == CHATTYPE_GROUP)\{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 message.setChatType(ChatType.GroupCh\hich\af0\dbch\af13\loch\f0 at);
\par \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 else if(chatType == CHATTYPE_CHATROOM)\{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0     message.setChatType(ChatType.ChatRoom);
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 message.setReceipt(toChatUsername);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 int len = Integer.parseInt(length);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 VoiceMessageBody body = new VoiceMessageBody(new File(filePath), len);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 message.addBody(body);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if(isRobot)\{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 message.setAttribute("em_robot_message", true);
\par \tab \tab \tab \}
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 conversation.addMessage(message);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 adapter.refreshSelectLast();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 setResult(RESULT_OK);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 // send file
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 // sendVoiceSub(filePath, fileName, message);
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0  catch (Exception e) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 e.printStackTrace();
\par \tab \tab \}
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab 
\par \tab \hich\af0\dbch\af13\loch\f0  * 
\par \tab \hich\af0\dbch\af13\loch\f0  * @param filePath
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 private void sendPicture(final String filePath) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 String to = toChatUsername;
\par \tab \tab \hich\af0\dbch\af13\loch\f0 // create and add im\hich\af0\dbch\af13\loch\f0 age message in view
\par \tab \tab \hich\af0\dbch\af13\loch\f0 final EMMessage message = EMMessage.createSendMessage(EMMessage.Type.IMAGE);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (chatType == CHATTYPE_GROUP)\{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 message.setChatType(ChatType.GroupChat);
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0 else if(chatType == CHATTYPE_CHATROOM)\{
\par \tab \tab \hich\af0\dbch\af13\loch\f0     message.setChatType(ChatType.ChatRoom);
\par \tab \tab \}
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 message.setReceipt(to);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 ImageMessageBody body = new ImageMessageBody(new File(filePath));
\par \tab \tab \hich\af0\dbch\af13\loch\f0 // body.setSendOriginalImage(true);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 message.addBody(body);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if(isRobot)\{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 message.setAttribute("em_robot_message", true);
\par \tab \tab \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0 conversation.addMessage(message);
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 listView.setAdapter(adapter);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 adapter.refreshSelectLast();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 setResult(RESULT_OK);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 // more(more);
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 private void sendVideo(final String filePath, final String thumbPath, final int length) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 final File videoFile = new File(filePath);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (!videoFile.exists()) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 return;
\par \tab \tab \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0 try \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 EMMessage message = EMMessage.createSendMessage(EMMessage.Type.VI\hich\af0\dbch\af13\loch\f0 DEO);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (chatType == CHATTYPE_GROUP)\{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 message.setChatType(ChatType.GroupChat);
\par \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 else if(chatType == CHATTYPE_CHATROOM)\{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0     message.setChatType(ChatType.ChatRoom);
\par \tab \tab \tab \}
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String to = toChatUsername;
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 me\hich\af0\dbch\af13\loch\f0 ssage.setReceipt(to);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 VideoMessageBody body = new VideoMessageBody(videoFile, thumbPath, length, videoFile.length());
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 message.addBody(body);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if(isRobot)\{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 message.setAttribute("em_robot_message", true);
\par \tab \tab \tab \}
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 conversation.addMessage(message);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 listView.setAdapter(adapter);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 adapter.refreshSelectLast();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 setResult(RESULT_OK);
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0  catch (Exception e) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 e.printStackTrace();
\par \tab \tab \}
\par 
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab \hich\af0\dbch\af13\loch\f0  * 
\par \tab \hich\af0\dbch\af13\loch\f0  * @param selectedImage
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 privat\hich\af0\dbch\af13\loch\f0 e void sendPicByUri(Uri selectedImage) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 String[] filePathColumn = \{ MediaStore.Images.Media.DATA \};
\par \tab \tab \hich\af0\dbch\af13\loch\f0 Cursor cursor = getContentResolver().query(selectedImage, filePathColumn, null, null, null);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 String st8 = getResources().getString(R.string.cant_find\hich\af0\dbch\af13\loch\f0 _pictures);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (cursor != null) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 cursor.moveToFirst();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String picturePath = cursor.getString(columnIndex);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 cursor.close();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 cursor = null;
\par 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (picturePath == null || picturePath.equals("null")) \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Toast toast = Toast.makeText(this, st8, Toast.LENGTH_SHORT);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 toast.setGravity(Gravity.CENTER, 0, 0);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 toast.show();
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 return;
\par \tab \tab \tab \}
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 sendPicture(picturePath);
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0  else \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 File file\hich\af0\dbch\af13\loch\f0  = new File(selectedImage.getPath());
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (!file.exists()) \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Toast toast = Toast.makeText(this, st8, Toast.LENGTH_SHORT);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 toast.setGravity(Gravity.CENTER, 0, 0);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 toast.show();
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 return;
\par 
\par \tab \tab \tab \}
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 sendPicture(file.getAbsolutePath());
\par \tab \tab \}
\par 
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab \hich\af0\dbch\af13\loch\f0  * 
\par \tab \hich\af0\dbch\af13\loch\f0  * @param latitude
\par \tab \hich\af0\dbch\af13\loch\f0  * @param longitude
\par \tab \hich\af0\dbch\af13\loch\f0  * @param imagePath
\par \tab \hich\af0\dbch\af13\loch\f0  * @param locationAddress
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 private void sendLocationMsg(double latitude, double longitude, String imagePath, String locationAddress) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 EMMessage message = EMMessage.createSendMessage(EMMessage.Type.LOCATION);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (chatType == CHATTYPE_GROUP)\{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 message.setChatType(ChatType.GroupChat);
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0 else if(chatType == CHATTYPE_CHATROOM)\{
\par \tab \tab \hich\af0\dbch\af13\loch\f0     message.setChatT\hich\af0\dbch\af13\loch\f0 ype(ChatType.ChatRoom);
\par \tab \tab \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0 LocationMessageBody locBody = new LocationMessageBody(locationAddress, latitude, longitude);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 message.addBody(locBody);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 message.setReceipt(toChatUsername);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if(isRobot)\{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 message.setAttribute("em_robot_message", true);
\par \tab \tab \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0 conversation.addMessage(message);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 listView.setAdapter(adapter);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 adapter.refreshSelectLast();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 setResult(RESULT_OK);
\par 
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab 
\par \tab \hich\af0\dbch\af13\loch\f0  * 
\par \tab \hich\af0\dbch\af13\loch\f0  * @param uri
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 private void sendFile(Uri uri) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 String filePath = null;
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if ("content".equalsIgnoreCase(uri.getScheme())) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String[] projection = \{ "_data" \};
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Cursor cursor = null;
\par 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 try \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 cursor = getContentResolver().query(uri, projection, null, null, null);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 int column_index = cursor.getColumnIndexOrThrow("_\hich\af0\dbch\af13\loch\f0 data");
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (cursor.moveToFirst()) \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 filePath = cursor.getString(column_index);
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  catch (Exception e) \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 e.printStackTrace();
\par \tab \tab \tab \}
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0  else if ("file".equalsIgnoreCase(uri.getScheme())) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 filePath = uri.getPath();
\par \tab \tab \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0 File file = n\hich\af0\dbch\af13\loch\f0 ew File(filePath);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (file == null || !file.exists()) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String st7 = getResources().getString(R.string.File_does_not_exist);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Toast.makeText(getApplicationContext(), st7, 0).show();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 return;
\par \tab \tab \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (file.length() > 10 * 1024 * 1024) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String\hich\af0\dbch\af13\loch\f0  st6 = getResources().getString(R.string.The_file_is_not_greater_than_10_m);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Toast.makeText(getApplicationContext(), st6, 0).show();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 return;
\par \tab \tab \}
\par 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 EMMessage message = EMMessage.createSendMessage(EMMessage.Type.FILE);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (chatType == CHATTYPE_GROUP)\{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 message.setChatType(ChatType.GroupChat);
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0 else if(chatType == CHATTYPE_CHATROOM)\{
\par \tab \tab \hich\af0\dbch\af13\loch\f0     message.setChatType(ChatType.ChatRoom);
\par \tab \tab \}
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 message.setReceipt(toChatUsername);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 // add \hich\af0\dbch\af13\loch\f0 message body
\par \tab \tab \hich\af0\dbch\af13\loch\f0 NormalFileMessageBody body = new NormalFileMessageBody(new File(filePath));
\par \tab \tab \hich\af0\dbch\af13\loch\f0 message.addBody(body);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if(isRobot)\{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 message.setAttribute("em_robot_message", true);
\par \tab \tab \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0 conversation.addMessage(message);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 listView.setAdapter(adapter);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 adapter.refreshSelectLast();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 setResult(RESULT_OK);
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab 
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 private void resendMessage() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 EMMessage msg = null;
\par \tab \tab \hich\af0\dbch\af13\loch\f0 msg = conversation.getMessage(resendPos);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 // msg.setBackSend(true);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 msg.status = EMMessage.Status.CREATE;
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 adapter.refreshSeekTo(resendPos);
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab \hich\af0\dbch\af13\loch\f0  * 
\par \tab \hich\af0\dbch\af13\loch\f0  * @param view
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 public void setModeVoice(View view) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 hideKeyboard();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 edittext_layout.setVisibility(View.GONE);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 more.setVisibility(View.GONE);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 view.setVisibility(View.GONE);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 buttonSetModeKeyboard.setVisibility(View.VISIBLE);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 buttonSend.setVisibility(View.GONE);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 btnMore.setVisibility(View.VISIBLE);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 buttonPressToSpeak.setVisibility(View.VISIBLE);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 iv_emoticons_normal.setVisibility(View.VISIBLE);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 iv_emoticons_checked.set\hich\af0\dbch\af13\loch\f0 Visibility(View.INVISIBLE);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 btnContainer.setVisibility(View.VISIBLE);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 emojiIconContainer.setVisibility(View.GONE);
\par 
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab \hich\af0\dbch\af13\loch\f0  * 
\par \tab \hich\af0\dbch\af13\loch\f0  * @param view
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 public void setModeKeyboard(View view) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 // mEditTextContent.setOnFocusChangeListener(new OnFocusChangeListener()
\par \tab \tab \hich\af0\dbch\af13\loch\f0 // \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 // @Override
\par \tab \tab \hich\af0\dbch\af13\loch\f0 // public void onFocusChange(View v, boolean hasFocus) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 // if(hasFocus)\{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 // getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALW\hich\af0\dbch\af13\loch\f0 AYS_VISIBLE);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 // \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0 // \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0 // \});
\par \tab \tab \hich\af0\dbch\af13\loch\f0 edittext_layout.setVisibility(View.VISIBLE);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 more.setVisibility(View.GONE);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 view.setVisibility(View.GONE);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 buttonSetModeVoice.setVisibility(View.VISIBLE);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 // mEditTextContent.setVisibility(View.VISIBLE);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 mEd\hich\af0\dbch\af13\loch\f0 itTextContent.requestFocus();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 // buttonSend.setVisibility(View.VISIBLE);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 buttonPressToSpeak.setVisibility(View.GONE);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (TextUtils.isEmpty(mEditTextContent.getText())) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 btnMore.setVisibility(View.VISIBLE);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 buttonSend.setVisibility(View.GONE);
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0  else \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 btnMore.setVisibility(View.GONE);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 buttonSend.setVisibility(View.VISIBLE);
\par \tab \tab \}
\par 
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab \hich\af0\dbch\af13\loch\f0  * 
\par \tab \hich\af0\dbch\af13\loch\f0  * @param view
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 public void emptyHistory(View view) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 String st5 = getResources().getString(R.string.Whether_to_empty_all_chats);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 startActivity(new Intent(this,SettingActivity.class));
\par \tab \tab \hich\af0\dbch\af13\loch\f0 finish();
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab \hich\af0\dbch\af13\loch\f0  * 
\par \tab \hich\af0\dbch\af13\loch\f0  * @param view
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 public void toGroupDetails(View view) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (room == \hich\af0\dbch\af13\loch\f0 null && group == null) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Toast.makeText(getApplicationContext(), R.string.gorup_not_found, Toast.LENGTH_SHORT).show();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 return;
\par \tab \tab \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if(chatType == CHATTYPE_GROUP)\{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 startActivityForResult((new Intent(this, SettingActivity  .class).putExtra("groupI\hich\af0\dbch\af13\loch\f0 d", toChatUsername)),
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 REQUEST_CODE_GROUP_DETAIL);
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0 else\{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 startActivityForResult((new Intent(this, ChatRoomDetailsActivity.class).putExtra("roomId", toChatUsername)),
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 REQUEST_CODE_GROUP_DETAIL);
\par \tab \tab \}
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab 
\par \tab \hich\af0\dbch\af13\loch\f0  * 
\par \tab \hich\af0\dbch\af13\loch\f0  * @param view
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 public void toggleMore(View view) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (more.getVisibility() == View.GONE) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 EMLog.d(TAG, "more gone");
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 hideKeyboard();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 more.setVisibility(View.VISIBLE);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 btnContainer.setVisibility(View.VISIBLE);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 emojiIconContainer.se\hich\af0\dbch\af13\loch\f0 tVisibility(View.GONE);
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0  else \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (emojiIconContainer.getVisibility() == View.VISIBLE) \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 emojiIconContainer.setVisibility(View.GONE);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 btnContainer.setVisibility(View.VISIBLE);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 iv_emoticons_normal.setVisibility(View.VISIBLE);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 iv_emoti\hich\af0\dbch\af13\loch\f0 cons_checked.setVisibility(View.INVISIBLE);
\par \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 more.setVisibility(View.GONE);
\par \tab \tab \tab \}
\par 
\par \tab \tab \}
\par 
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par }\pard \ltrpar\qj \li210\ri0\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin210\itap0\culi100\pararsid6691270 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3625243 \tab \hich\af0\dbch\af13\loch\f0  * 
\par }\pard \ltrpar\qj \li0\ri0\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3625243 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3625243 \tab \hich\af0\dbch\af13\loch\f0  * @param v
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 public void editClick(View v) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 listView.setSelection(listView.getCount() - 1);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (more.getVisibility() == View.VISIBLE) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 more.setVisibility(View.GONE);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 iv_emoticons_normal.setVisibility(View.VISIBLE);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 iv_emoticons_checked.setVisibility(View.INVISIBLE);
\par \tab \tab \}
\par 
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 private PowerManager.WakeLock wakeLock;
\par \hich\af0\dbch\af13\loch\f0     private ImageVi\hich\af0\dbch\af13\loch\f0 ew voiceCallBtn;
\par \hich\af0\dbch\af13\loch\f0     private ImageView videoCallBtn;
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab \hich\af0\dbch\af13\loch\f0  * 
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 class PressToSpeakListen implements View.OnTouchListener \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \hich\af0\dbch\af13\loch\f0 public boolean onTouch(View v, MotionEvent event) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 switch (event.getAction()) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 case Mo\hich\af0\dbch\af13\loch\f0 tionEvent.ACTION_DOWN:
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (!CommonUtils.isExitsSdcard()) \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String st4 = getResources().getString(R.string.Send_voice_need_sdcard_support);
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Toast.makeText(ChatActivity.this, st4, Toast.LENGTH_SHORT).show();
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 return false;
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 try \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 v.setPressed(true);
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 wakeLock.acquire();
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (VoicePlayClickListener.isPlaying)
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 VoicePlayClickListener.currentPlayListener.stopPlayVoice();
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 recordingContainer.setVisibility(View.VISIBLE);
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 recordingHint.setText(getString(R.strin\hich\af0\dbch\af13\loch\f0 g.move_up_to_cancel));
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 recordingHint.setBackgroundColor(Color.TRANSPARENT);
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 voiceRecorder.startRecording(null, toChatUsername, getApplicationContext());
\par \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  catch (Exception e) \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 e.printStackTrace();
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 v.setPressed(false);
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (wake\hich\af0\dbch\af13\loch\f0 Lock.isHeld())
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 wakeLock.release();
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (voiceRecorder != null)
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 voiceRecorder.discardRecording();
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 recordingContainer.setVisibility(View.INVISIBLE);
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Toast.makeText(ChatActivity.this, R.string.recoding_fail, Toast.LENGTH_SHORT).show(\hich\af0\dbch\af13\loch\f0 );
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 return false;
\par \tab \tab \tab \tab \}
\par 
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 return true;
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 case MotionEvent.ACTION_MOVE: \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (event.getY() < 0) \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 recordingHint.setText(getString(R.string.release_to_cancel));
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 recordingHint.setBackgroundResource(R.drawable.recording_text_hint_bg);
\par \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 recordingHint.setText(getString(R.string.move_up_to_cancel));
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 recordingHint.setBackgroundColor(Color.TRANSPARENT);
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 return true;
\par \tab \tab \tab \}
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 case MotionEvent.ACTION_UP:
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 v.setPressed(false);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 recordingContainer.setVisibili\hich\af0\dbch\af13\loch\f0 ty(View.INVISIBLE);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (wakeLock.isHeld())
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 wakeLock.release();
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (event.getY() < 0) \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 // discard the recorded audio.
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 voiceRecorder.discardRecording();
\par 
\par \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 // stop recording and send voice file
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String st1 = getRes\hich\af0\dbch\af13\loch\f0 ources().getString(R.string.Recording_without_permission);
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String st2 = getResources().getString(R.string.The_recording_time_is_too_short);
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String st3 = getResources().getString(R.string.send_failure_please);
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 try \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 int length = voiceRe\hich\af0\dbch\af13\loch\f0 corder.stopRecoding();
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (length > 0) \{
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 sendVoice(voiceRecorder.getVoiceFilePath(), voiceRecorder.getVoiceFileName(toChatUsername),
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Integer.toString(length), false);
\par \tab \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else if (length == EMError.INVALID_FILE) \{
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Toast.mak\hich\af0\dbch\af13\loch\f0 eText(getApplicationContext(), st1, Toast.LENGTH_SHORT).show();
\par \tab \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else \{
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Toast.makeText(getApplicationContext(), st2, Toast.LENGTH_SHORT).show();
\par \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  catch (Exception e) \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 e.printStackTrace();
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Toast.makeText(ChatActivity.this, st3, Toast.LENGTH_SHORT).show();
\par \tab \tab \tab \tab \tab \}
\par 
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 return true;
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 default:
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 recordingContainer.setVisibility(View.INVISIBLE);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (voiceRecorder != null)
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 voiceRecorder.discardRecording();
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 return false\hich\af0\dbch\af13\loch\f0 ;
\par \tab \tab \tab \}
\par \tab \tab \}
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab \hich\af0\dbch\af13\loch\f0  * 
\par \tab \hich\af0\dbch\af13\loch\f0  * @param i
\par \tab \hich\af0\dbch\af13\loch\f0  * @return
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 private View getGridChildView(int i) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 View view = View.inflate(this, R.layout.expression_gridview, null);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 ExpandGridView gv = (ExpandGridView) view.findViewById(R.id.\hich\af0\dbch\af13\loch\f0 gridview);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 List<String> list = new ArrayList<String>();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (i == 1) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 List<String> list1 = reslist.subList(0, 20);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 list.addAll(list1);
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0  else if (i == 2) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 list.addAll(reslist.subList(20, reslist.size()));
\par \tab \tab \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0 list.add("delete_expression");
\par \tab \tab \hich\af0\dbch\af13\loch\f0 final ExpressionAdapter expressionAdapter = new ExpressionAdapter(this, 1, list);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 gv.setAdapter(expressionAdapter);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 gv.setOnItemClickListener(new OnItemClickListener() \{
\par 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void onItemClick(Adapte\hich\af0\dbch\af13\loch\f0 rView<?> parent, View view, int position, long id) \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String filename = expressionAdapter.getItem(position);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 try \{
\par }\pard \ltrpar\qj \li0\ri0\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid12800879 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3625243 \tab \tab \tab \tab \tab 
\par }\pard \ltrpar\qj \li0\ri0\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3625243 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3625243 \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 
if (buttonSetModeKeyboard.getVisibility() != View.VISIBLE) \{
\par 
\par }\pard \ltrpar\qj \li0\ri0\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid6829312 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3625243 \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 
if (filename != "delete_expression") \{ // 
\par }\pard \ltrpar\qj \li0\ri0\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3625243 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3625243 \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 
Class clz = Class.forName("com.easemob.chatuidemo.utils.SmileUtils");
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Field field = clz.getField(filename);
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 mEditTextC\hich\af0\dbch\af13\loch\f0 ontent.append(SmileUtils.getSmiledText(ChatActivity.this,
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 (String) field.get(null)));
\par \tab \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else \{ 
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (!TextUtils.isEmpty(mEditTextContent.getText())) \{
\par 
\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 int selectionStart = mEditT}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10711045 \hich\af0\dbch\af13\loch\f0 extContent.getSelectionStart();}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3625243 

\par \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (selectionStart > 0) \{
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String body = mEditTextContent.getText().toString();
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String tempStr = body.substring(0, selectionStart);
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 int i = tempStr.lastIndexOf("[");// 
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (i != -1) \{
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 CharSequence cs = tempStr.substring(i, selectionStart);
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (SmileUtils.containsKey(cs.toString()))
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 mEditTextContent.getEditableText().delete(i, selectionStart);
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 else
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 mEditTextConte\hich\af0\dbch\af13\loch\f0 nt.getEditableText().delete(selectionStart - 1,
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 selectionStart);
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else \{
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 mEditTextContent.getEditableText().delete(selectionStart - 1, selectionStart);
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \tab \tab \}
\par 
\par \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  catch (Exception e)\hich\af0\dbch\af13\loch\f0  \{
\par \tab \tab \tab \tab \}
\par 
\par \tab \tab \tab \}
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0 );
\par \tab \tab \hich\af0\dbch\af13\loch\f0 return view;
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 public List<String> getExpressionRes(int getSum) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 List<String> reslist = new ArrayList<String>();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 for (int x = 1; x <= getSum; x++) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String filename = "ee_" + x;
\par 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 reslist.add(filename);
\par 
\par \tab \tab \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0 return reslist;
\par 
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \hich\af0\dbch\af13\loch\f0 protected void onDestroy() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 super.onDestroy();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 activityInstance = null;
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if(groupListener != null)\{
\par \tab \tab \hich\af0\dbch\af13\loch\f0     EMGroupManager.getInstance().removeGroupChangeListener(groupListener);
\par \tab \tab \}
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \hich\af0\dbch\af13\loch\f0 protected void onR\hich\af0\dbch\af13\loch\f0 esume() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 super.onResume();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (group != null)
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 ((TextView) findViewById(R.id.name)).setText(group.getGroupName());
\par \tab \tab \hich\af0\dbch\af13\loch\f0 voiceCallBtn.setEnabled(true);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 videoCallBtn.setEnabled(true);
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0  if(adapter != null)\{
\par \tab \tab \hich\af0\dbch\af13\loch\f0      adapter.refresh();
\par \tab \hich\af0\dbch\af13\loch\f0      \}
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 DemoHXSDKHelper sdkHelper = (DemoHXSDKHelper) DemoHXSDKHelper.getInstance();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 sdkHelper.pushActivity(this);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 // register the event listener when enter the foreground
\par \tab \tab \hich\af0\dbch\af13\loch\f0 EMChatManager.getInstance().registerEventListener(
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 this,
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 new EMNotifierEvent\hich\af0\dbch\af13\loch\f0 .Event[] \{ EMNotifierEvent.Event.EventNewMessage,EMNotifierEvent.Event.EventOfflineMessage,
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 EMNotifierEvent.Event.EventDeliveryAck, EMNotifierEvent.Event.EventReadAck \});
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \hich\af0\dbch\af13\loch\f0 protected void onStop() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 // unregister this event listener w\hich\af0\dbch\af13\loch\f0 hen this activity enters the
\par \tab \tab \hich\af0\dbch\af13\loch\f0 // background
\par \tab \tab \hich\af0\dbch\af13\loch\f0 EMChatManager.getInstance().unregisterEventListener(this);
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 DemoHXSDKHelper sdkHelper = (DemoHXSDKHelper) DemoHXSDKHelper.getInstance();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 sdkHelper.popActivi\hich\af0\dbch\af13\loch\f0 ty(this);
\par \tab \tab 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 super.onStop();
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \hich\af0\dbch\af13\loch\f0 protected void onPause() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 super.onPause();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (wakeLock.isHeld())
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 wakeLock.release();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (VoicePlayClickListener.isPlaying && VoicePlayClickListener.currentPlayListener != null) \{
\par \tab 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 VoicePlayClickListener.currentPlayListener.stopPlayVoice();
\par \tab \tab \}
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 try \{
\par \tab 
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (voiceRecorder.isRecording()) \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 voiceRecorder.discardRecording();
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 recordingContainer.setVisibility(View.INVISIBLE);
\par \tab \tab \tab \}
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0  catch (Exception e) \{
\par \tab \tab \}
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 private void hideKeyboard() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (getWindow().getAttributes().softInputMode != WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (getCurrentFocus() != null)
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 manager.hideSoftInputFromWindow(getCurrentFocus().getWind\hich\af0\dbch\af13\loch\f0 owToken(), InputMethodManager.HIDE_NOT_ALWAYS);
\par \tab \tab \}
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab \hich\af0\dbch\af13\loch\f0  * 
\par \tab \hich\af0\dbch\af13\loch\f0  * @param username
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 private void addUserToBlacklist(final String username) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 final ProgressDialog pd = new ProgressDialog(this);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 pd.setMessage(getString(R.string.Is_moved_into_blacklist));
\par \tab \tab \hich\af0\dbch\af13\loch\f0 pd.setCanceledOnTouchOutside(false);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 pd.show();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 new Thread(new Runnable() \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void run() \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 try \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 EMContactManager.getInstance().addUserToBlackList(username, false);
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 r\hich\af0\dbch\af13\loch\f0 unOnUiThread(new Runnable() \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void run() \{
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 pd.dismiss();
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Toast.makeText(getApplicationContext(), R.string.Move_into_blacklist_success, Toast.LENGTH_SHORT).show();
\par \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 );
\par \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  catch (EaseMobException e) \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 e.printSt\hich\af0\dbch\af13\loch\f0 ackTrace();
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 runOnUiThread(new Runnable() \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void run() \{
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 pd.dismiss();
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Toast.makeText(getApplicationContext(), R.string.Move_into_blacklist_failure, Toast.LENGTH_SHORT).show();
\par \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 );
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \}
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0 ).start();
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /\hich\af0\dbch\af13\loch\f0 **
\par \tab \hich\af0\dbch\af13\loch\f0  * 
\par \tab \hich\af0\dbch\af13\loch\f0  * @param view
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 public void back(View view) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 EMChatManager.getInstance().unregisterEventListener(this);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if(chatType == CHATTYPE_CHATROOM)\{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 EMChatManager.getInstance().leaveChatRoom(toChatUsername);
\par \tab \tab \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0 finish();
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab 
\par \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \hich\af0\dbch\af13\loch\f0 public void onBackPressed() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (more.getVisibility() == View.VISIBLE) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 more.setVisibility(View.GONE);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 iv_emoticons_normal.setVisibility(View.VISIBLE);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 iv_emoticons_checked.setVisibility(View.INVISIBLE);
\par \tab \tab \}\hich\af0\dbch\af13\loch\f0  else \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 super.onBackPressed();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if(chatType == CHATTYPE_CHATROOM)\{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 EMChatManager.getInstance().leaveChatRoom(toChatUsername);
\par \tab \tab \tab \}
\par \tab \tab \}
\par \tab \tab \hich\af0\dbch\af13\loch\f0 startActivity(new Intent(this,ControlActivity.class));
\par \tab \tab \hich\af0\dbch\af13\loch\f0 finish();
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab 
\par \tab \hich\af0\dbch\af13\loch\f0  * 
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 private class ListScrollListener implements OnScrollListener \{
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \hich\af0\dbch\af13\loch\f0 public void onScrollStateChanged(AbsListView view, int scrollState) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 switch (scrollState) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 case OnScrollListener.SCROLL_STATE_IDLE:
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 /*if (view.getFirstVisiblePo\hich\af0\dbch\af13\loch\f0 sition() == 0 && !isloading && haveMoreData && conversation.getAllMessages().size() != 0) \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 isloading = true;
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 loadmorePB.setVisibility(View.VISIBLE);
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 //\tab \tab \tab \tab 
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 List<EMMessage> messages;
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 EMMe\hich\af0\dbch\af13\loch\f0 ssage firstMsg = conversation.getAllMessages().get(0);
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 try \{
\par }\pard \ltrpar\qj \li0\ri0\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid12726074 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3625243 \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 // 
\par }\pard \ltrpar\qj \li0\ri0\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3625243 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3625243 \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (chatType == CHATTYPE_SINGLE)

\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 messages = conversation.loadMoreMsgFromDB(firstMsg.\hich\af0\dbch\af13\loch\f0 getMsgId(), pagesize);
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 else
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 messages = conversation.loadMoreGroupMsgFromDB(firstMsg.getMsgId(), pagesize);
\par \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  catch (Exception e1) \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 loadmorePB.setVisibility(View.GONE);
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 return;
\par \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 try \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Thread.sleep(300);
\par \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  catch (InterruptedException e) \{
\par \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (messages.size() != 0) \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (messages.size() > 0) \{
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 adapter.refreshSeekTo(messages.size() - 1);
\par \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \tab 
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (messages.size() != pagesize)
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 haveMoreData = f\hich\af0\dbch\af13\loch\f0 alse;
\par \tab \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0  else \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 haveMoreData = false;
\par \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 loadmorePB.setVisibility(View.GONE);
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 isloading = false;
\par 
\par \tab \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 */
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \tab \}
\par \tab \tab \}
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \hich\af0\dbch\af13\loch\f0 public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int tota\hich\af0\dbch\af13\loch\f0 lItemCount) \{
\par 
\par \tab \tab \}
\par 
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \hich\af0\dbch\af13\loch\f0 protected void onNewIntent(Intent intent) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 String username = intent.getStringExtra("userId");
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if (toChatUsername.equals(username))
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 super.onNewIntent(intent);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 else \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 finish();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 startActivity(intent);
\par \tab \tab \}
\par 
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab \hich\af0\dbch\af13\loch\f0  * 
\par \tab \hich\af0\dbch\af13\loch\f0  * @param forward_msg_id
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 protected void forwardMessage(String forward_msg_id) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 final EMMessage forward_msg = EMChatManager.getInstance().getMessage(forward_msg_id);
\par \tab \tab \hich\af0\dbch\af13\loch\f0 E\hich\af0\dbch\af13\loch\f0 MMessage.Type type = forward_msg.getType();
\par \tab \tab \hich\af0\dbch\af13\loch\f0 switch (type) \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 case TXT:
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String content = ((TextMessageBody) forward_msg.getBody()).getMessage();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 sendText(content);
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \hich\af0\dbch\af13\loch\f0 case IMAGE:
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String filePath = ((ImageMessageBody) forward_msg.getBody()).getLocalUrl();
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (filePath != null) \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 File file = new File(filePath);
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (!file.exists()) \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 filePath = ImageUtils.getThumbnailImagePath(filePath);
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 sendPicture(filePath);
\par \tab \tab \tab \}
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \hich\af0\dbch\af13\loch\f0 default:
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 break;
\par \tab \tab \}
\par \tab \tab 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 if(forward_msg.getChatType() == EMMessage.ChatType.ChatRoom)\{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 EMChatManager.getInstance().leaveChatRoom(forward_msg.getTo());
\par \tab \tab \}
\par \tab \}
\par \tab 
\par \tab \hich\af0\dbch\af13\loch\f0 /**
\par \tab \hich\af0\dbch\af13\loch\f0  * 
\par \tab \hich\af0\dbch\af13\loch\f0  */
\par \tab \hich\af0\dbch\af13\loch\f0 clas\hich\af0\dbch\af13\loch\f0 s GroupListener extends GroupRemoveListener\{
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \hich\af0\dbch\af13\loch\f0 public void onUserRemoved(final String groupId, String groupName) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 runOnUiThread(new Runnable() \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String st13 = getResources().getString(R.string.you_are_group);
\par 
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void run() \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (toChatUsername.equals(groupId)) \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Toast.makeText(ChatActivity.this, st13, 1).show();
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (GroupDetailsActivity.instance != null)
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 GroupDetailsActivity.instance.finish();
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 finish();
\par \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 );
\par \tab \tab \}
\par 
\par \tab \tab \hich\af0\dbch\af13\loch\f0 @Override
\par \tab \tab \hich\af0\dbch\af13\loch\f0 publi\hich\af0\dbch\af13\loch\f0 c void onGroupDestroy(final String groupId, String groupName) \{
\par \tab \tab \tab \hich\af0\dbch\af13\loch\f0 runOnUiThread(new Runnable() \{
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 String st14 = getResources().getString(R.string.the_current_group);
\par 
\par \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 public void run() \{
\par \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (toChat\hich\af0\dbch\af13\loch\f0 Username.equals(groupId)) \{
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 Toast.makeText(ChatActivity.this, st14, 1).show();
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 if (GroupDetailsActivity.instance != null)
\par \tab \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 GroupDetailsActivity.instance.finish();
\par \tab \tab \tab \tab \tab \tab \hich\af0\dbch\af13\loch\f0 finish();
\par \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \}\hich\af0\dbch\af13\loch\f0 );
\par \tab \tab \}
\par 
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 public String getToChatUsername() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 return toChatUsername;
\par \tab \}
\par 
\par \tab \hich\af0\dbch\af13\loch\f0 public ListView getListView() \{
\par \tab \tab \hich\af0\dbch\af13\loch\f0 return listView;
\par \tab \}
\par \}}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3625243\charrsid3625243 
\par }\pard \ltrpar\qj \li0\ri0\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid15563859 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7087927\charrsid15563859 
\par }{\*\themedata 504b030414000600080000002100828abc13fa0000001c020000130000005b436f6e74656e745f54797065735d2e786d6cac91cb6ac3301045f785fe83d0b6d8
72ba28a5d8cea249777d2cd20f18e4b12d6a8f843409c9df77ecb850ba082d74231062ce997b55ae8fe3a00e1893f354e9555e6885647de3a8abf4fbee29bbd7
2a3150038327acf409935ed7d757e5ee14302999a654e99e393c18936c8f23a4dc072479697d1c81e51a3b13c07e4087e6b628ee8cf5c4489cf1c4d075f92a0b
44d7a07a83c82f308ac7b0a0f0fbf90c2480980b58abc733615aa2d210c2e02cb04430076a7ee833dfb6ce62e3ed7e14693e8317d8cd0433bf5c60f53fea2fe7
065bd80facb647e9e25c7fc421fd2ddb526b2e9373fed4bb902e182e97b7b461e6bfad3f010000ffff0300504b030414000600080000002100a5d6a7e7c00000
00360100000b0000005f72656c732f2e72656c73848fcf6ac3300c87ef85bd83d17d51d2c31825762fa590432fa37d00e1287f68221bdb1bebdb4fc7060abb08
84a4eff7a93dfeae8bf9e194e720169aaa06c3e2433fcb68e1763dbf7f82c985a4a725085b787086a37bdbb55fbc50d1a33ccd311ba548b63095120f88d94fbc
52ae4264d1c910d24a45db3462247fa791715fd71f989e19e0364cd3f51652d73760ae8fa8c9ffb3c330cc9e4fc17faf2ce545046e37944c69e462a1a82fe353
bd90a865aad41ed0b5b8f9d6fd010000ffff0300504b0304140006000800000021006b799616830000008a0000001c0000007468656d652f7468656d652f7468
656d654d616e616765722e786d6c0ccc4d0ac3201040e17da17790d93763bb284562b2cbaebbf600439c1a41c7a0d29fdbd7e5e38337cedf14d59b4b0d592c9c
070d8a65cd2e88b7f07c2ca71ba8da481cc52c6ce1c715e6e97818c9b48d13df49c873517d23d59085adb5dd20d6b52bd521ef2cdd5eb9246a3d8b4757e8d3f7
29e245eb2b260a0238fd010000ffff0300504b030414000600080000002100c71c6d149c060000511b0000160000007468656d652f7468656d652f7468656d65
312e786d6cec594d6f1b4518be23f11f467b6f6327761a4775aad8b11b68d346b15bd4e3783dde9d7a766735334eea1b6a8f484888827aa012e2c20101955a09
24caaf49292a45ea5fe09d99ddf54ebc26491b4105f521f1ce3eeff7c7bc33be78e94ec4d03e1192f2b8e955cf573c44629f0f691c34bd1bfdeeb9350f4985e3
21663c264d6f4aa47769e3fdf72ee27515928820a08fe53a6e7aa152c9fad292f46119cbf33c2131bc1b711161058f22581a0a7c007c23b6b45ca9ac2e4598c6
1e8a71046caf8f46d427e8d9cfbfbcf8e681b79171ef3010112ba9177c267a9a3771480c7638ae6a849cca3613681fb3a6078286fca04fee280f312c15bc687a
15f3f196362e2ee1f59488a905b405baaef9a47429c170bc6c648a60900bad766b8d0b5b397f03606a1ed7e974da9d6acecf00b0ef83a5569722cf5a77addaca
781640f6eb3cef76a55ea9b9f802ff95399d1bad56abde4875b14c0dc87eadcde1d72aabb5cd65076f40165f9fc3d75a9bedf6aa8337208b5f9dc3772f34566b
2ede804246e3f11c5a07b4db4db9e7901167dba5f03580af5552f80c05d99067971631e2b15a946b11becd4517001ac8b0a23152d3848cb00f69dcc6d14050ac
05e075820b6fec922fe796b42c247d4113d5f43e4c3094c48cdfaba7dfbf7afa181dde7d7278f7a7c37bf70eeffe68193954db380e8a542fbffdeccf871fa33f
1e7ffdf2fe17e57859c4fff6c327cf7efdbc1c08e53353e7f9978f7e7ff2e8f9834f5f7c77bf04be29f0a008efd38848748d1ca03d1e8161c62baee664204e47
d10f312d526cc681c431d6524af87754e8a0af4d314ba3e3e8d122ae076f0a681f65c0cb93db8ec2bd504c142d917c258c1ce00ee7acc545a917ae68590537f7
2771502e5c4c8ab83d8cf7cb64b771ecc4b73349a06f6669e918de0e89a3e62ec3b1c201898942fa1d1f135262dd2d4a1dbfee505f70c9470adda2a88569a94b
fa74e064d38c689b4610976999cd106fc7373b37518bb332abb7c8be8b84aac0ac44f93e618e1b2fe389c25119cb3e8e58d1e157b10acb94ec4d855fc475a482
48078471d4191229cb68ae0bb0b710f42b183a5669d877d834729142d17119cfab98f322728b8fdb218e92326c8fc66111fb811c438a62b4cb55197c87bb15a2
9f210e385e18ee9b9438e13ebe1bdca081a3d22c41f49b89d0b18456ed74e088c67fd78e19857e6c73e0ecda3134c0e75f3d2cc9acb7b5116fc29e545609db47
daef22dcd1a6dbe66248dffe9ebb8527f12e81349fdf78deb5dc772dd7fbcfb7dc45f57cd2463bebadd076f5dc6087623322470b27e41165aca7a68c5c956648
96b04f0cbbb0a8e9ccf190e427a62484af695f777081c0860609ae3ea22aec85388101bbea6926814c590712255cc2c1ce2c97f2d67818d2953d16d6f581c1f6
0389d50e1fdae515bd9c9d0b723666b709cce13313b4a2199c54d8ca85942998fd3ac2aa5aa9134bab1ad54cab73a4e526430ce74d83c5dc9b308020185bc0cb
ab7040d7a2e1608219196abfdbbd370b8b89c2598648867848d21869bbe763543541ca72c5dc0440ee94c4481ff28ef15a415a43b37d0369270952515c6d81b8
2c7a6f12a52c836751d2757ba41c595c2c4e16a383a6d7a82fd73de4e3a4e98de04c0b5fa304a22ef5cc8759003743be1236ed8f2d6653e5b3683632c3dc22a8
c23585f5fb9cc14e1f4884545b58863635ccab340558ac2559fd97ebe0d6b332c066fa6b68b1b206c9f0af69017e74434b4623e2ab62b00b2bda77f6316da57c
a288e885c303346013b18721fc3a55c19e21957035613a827e807b34ed6df3ca6dce69d1156faf0cceae639684386db7ba44b34ab67053c7b90ee6a9a01ed856
aabb31eef4a698923f23538a69fc3f3345ef277053b032d411f0e11e5760a4ebb5e971a1420e5d2809a9df15303898de01d90277b1f01a920a6e93cd7f41f6f5
7f5b739687296b38f0a93d1a2041613f52a1206417da92c9be639855d3bdcbb2642923935105756562d51e907dc2faba07aeeabddd4321a4bae926691b30b8a3
f9e73ea7153408f49053ac37a787e47bafad817f7af2b1c50c46b97dd80c3499ff73154b76554b6fc8b3bdb768887e311bb36a595580b0c256d048cbfe355538
e5566b3bd69cc5cbf54c3988e2bcc5b0980f4409dcf720fd07f63f2a7c464c1aeb0db5cff7a0b722f8a1413383b481ac3e67070fa41ba45d1cc0e064176d3269
56d6b5e9e8a4bd966dd6673ce9e6728f385b6b7692789fd2d9f970e68a736af12c9d9d7ad8f1b55d5be86a88ecd11285a5517690318131bf69157f75e283db10
e82db8df9f30254d32c16f4a02c3e8d9337500c56f251ad28dbf000000ffff0300504b0304140006000800000021000dd1909fb60000001b0100002700000074
68656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73848f4d0ac2301484f78277086f6fd3ba109126dd88d0add40384
e4350d363f2451eced0dae2c082e8761be9969bb979dc9136332de3168aa1a083ae995719ac16db8ec8e4052164e89d93b64b060828e6f37ed1567914b284d26
2452282e3198720e274a939cd08a54f980ae38a38f56e422a3a641c8bbd048f7757da0f19b017cc524bd62107bd5001996509affb3fd381a89672f1f165dfe51
4173d9850528a2c6cce0239baa4c04ca5bbabac4df000000ffff0300504b01022d0014000600080000002100828abc13fa0000001c0200001300000000000000
000000000000000000005b436f6e74656e745f54797065735d2e786d6c504b01022d0014000600080000002100a5d6a7e7c0000000360100000b000000000000
000000000000002b0100005f72656c732f2e72656c73504b01022d00140006000800000021006b799616830000008a0000001c00000000000000000000000000
140200007468656d652f7468656d652f7468656d654d616e616765722e786d6c504b01022d0014000600080000002100c71c6d149c060000511b000016000000
00000000000000000000d10200007468656d652f7468656d652f7468656d65312e786d6c504b01022d00140006000800000021000dd1909fb60000001b010000
2700000000000000000000000000a10900007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73504b050600000000050005005d0100009c0a00000000}
{\*\colorschememapping 3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d3822207374616e64616c6f6e653d22796573223f3e0d0a3c613a636c724d
617020786d6c6e733a613d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f64726177696e676d6c2f323030362f6d6169
6e22206267313d226c743122207478313d22646b3122206267323d226c743222207478323d22646b322220616363656e74313d22616363656e74312220616363
656e74323d22616363656e74322220616363656e74333d22616363656e74332220616363656e74343d22616363656e74342220616363656e74353d22616363656e74352220616363656e74363d22616363656e74362220686c696e6b3d22686c696e6b2220666f6c486c696e6b3d22666f6c486c696e6b222f3e}
{\*\latentstyles\lsdstimax267\lsdlockeddef0\lsdsemihiddendef1\lsdunhideuseddef1\lsdqformatdef0\lsdprioritydef99{\lsdlockedexcept \lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority0 \lsdlocked0 Normal;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 1;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 2;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 3;
\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 4;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 5;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 6;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 7;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 8;
\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 9;\lsdpriority39 \lsdlocked0 toc 1;\lsdpriority39 \lsdlocked0 toc 2;\lsdpriority39 \lsdlocked0 toc 3;\lsdpriority39 \lsdlocked0 toc 4;\lsdpriority39 \lsdlocked0 toc 5;\lsdpriority39 \lsdlocked0 toc 6;
\lsdpriority39 \lsdlocked0 toc 7;\lsdpriority39 \lsdlocked0 toc 8;\lsdpriority39 \lsdlocked0 toc 9;\lsdqformat1 \lsdpriority35 \lsdlocked0 caption;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority10 \lsdlocked0 Title;
\lsdpriority1 \lsdlocked0 Default Paragraph Font;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority11 \lsdlocked0 Subtitle;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority22 \lsdlocked0 Strong;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority20 \lsdlocked0 Emphasis;\lsdsemihidden0 \lsdunhideused0 \lsdpriority59 \lsdlocked0 Table Grid;\lsdunhideused0 \lsdlocked0 Placeholder Text;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority1 \lsdlocked0 No Spacing;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 1;
\lsdunhideused0 \lsdlocked0 Revision;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority34 \lsdlocked0 List Paragraph;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority29 \lsdlocked0 Quote;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority30 \lsdlocked0 Intense Quote;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority19 \lsdlocked0 Subtle Emphasis;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority21 \lsdlocked0 Intense Emphasis;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority31 \lsdlocked0 Subtle Reference;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority32 \lsdlocked0 Intense Reference;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority33 \lsdlocked0 Book Title;\lsdpriority37 \lsdlocked0 Bibliography;
\lsdqformat1 \lsdpriority39 \lsdlocked0 TOC Heading;}}{\*\datastore 0105000002000000180000004d73786d6c322e534158584d4c5265616465722e352e3000000000000000000000060000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000000000000100000feffffff00000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdfffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffffffffffffec69d9888b8b3d4c859eaf6cd158be0f00000000000000000000000090ef
343a080ed101feffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000105000000000000}}